# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct MeterInfo <: SwaggerModel
    MeterId::Any # spec type: Union{ Nothing, String } # spec name: MeterId
    MeterName::Any # spec type: Union{ Nothing, String } # spec name: MeterName
    MeterCategory::Any # spec type: Union{ Nothing, String } # spec name: MeterCategory
    MeterSubCategory::Any # spec type: Union{ Nothing, String } # spec name: MeterSubCategory
    Unit::Any # spec type: Union{ Nothing, String } # spec name: Unit
    MeterTags::Any # spec type: Union{ Nothing, Vector{String} } # spec name: MeterTags
    MeterRegion::Any # spec type: Union{ Nothing, String } # spec name: MeterRegion
    MeterRates::Any # spec type: Union{ Nothing, Dict{String, Float32} } # spec name: MeterRates
    EffectiveDate::Any # spec type: Union{ Nothing, DateTime } # spec name: EffectiveDate
    IncludedQuantity::Any # spec type: Union{ Nothing, Float32 } # spec name: IncludedQuantity

    function MeterInfo(;MeterId=nothing, MeterName=nothing, MeterCategory=nothing, MeterSubCategory=nothing, Unit=nothing, MeterTags=nothing, MeterRegion=nothing, MeterRates=nothing, EffectiveDate=nothing, IncludedQuantity=nothing)
        o = new()
        validate_property(MeterInfo, Symbol("MeterId"), MeterId)
        setfield!(o, Symbol("MeterId"), MeterId)
        validate_property(MeterInfo, Symbol("MeterName"), MeterName)
        setfield!(o, Symbol("MeterName"), MeterName)
        validate_property(MeterInfo, Symbol("MeterCategory"), MeterCategory)
        setfield!(o, Symbol("MeterCategory"), MeterCategory)
        validate_property(MeterInfo, Symbol("MeterSubCategory"), MeterSubCategory)
        setfield!(o, Symbol("MeterSubCategory"), MeterSubCategory)
        validate_property(MeterInfo, Symbol("Unit"), Unit)
        setfield!(o, Symbol("Unit"), Unit)
        validate_property(MeterInfo, Symbol("MeterTags"), MeterTags)
        setfield!(o, Symbol("MeterTags"), MeterTags)
        validate_property(MeterInfo, Symbol("MeterRegion"), MeterRegion)
        setfield!(o, Symbol("MeterRegion"), MeterRegion)
        validate_property(MeterInfo, Symbol("MeterRates"), MeterRates)
        setfield!(o, Symbol("MeterRates"), MeterRates)
        validate_property(MeterInfo, Symbol("EffectiveDate"), EffectiveDate)
        setfield!(o, Symbol("EffectiveDate"), EffectiveDate)
        validate_property(MeterInfo, Symbol("IncludedQuantity"), IncludedQuantity)
        setfield!(o, Symbol("IncludedQuantity"), IncludedQuantity)
        o
    end
end # type MeterInfo

const _property_map_MeterInfo = Dict{Symbol,Symbol}(Symbol("MeterId")=>Symbol("MeterId"), Symbol("MeterName")=>Symbol("MeterName"), Symbol("MeterCategory")=>Symbol("MeterCategory"), Symbol("MeterSubCategory")=>Symbol("MeterSubCategory"), Symbol("Unit")=>Symbol("Unit"), Symbol("MeterTags")=>Symbol("MeterTags"), Symbol("MeterRegion")=>Symbol("MeterRegion"), Symbol("MeterRates")=>Symbol("MeterRates"), Symbol("EffectiveDate")=>Symbol("EffectiveDate"), Symbol("IncludedQuantity")=>Symbol("IncludedQuantity"))
const _property_types_MeterInfo = Dict{Symbol,String}(Symbol("MeterId")=>"String", Symbol("MeterName")=>"String", Symbol("MeterCategory")=>"String", Symbol("MeterSubCategory")=>"String", Symbol("Unit")=>"String", Symbol("MeterTags")=>"Vector{String}", Symbol("MeterRegion")=>"String", Symbol("MeterRates")=>"Dict{String, Float32}", Symbol("EffectiveDate")=>"DateTime", Symbol("IncludedQuantity")=>"Float32")
Base.propertynames(::Type{ MeterInfo }) = collect(keys(_property_map_MeterInfo))
Swagger.property_type(::Type{ MeterInfo }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_MeterInfo[name]))}
Swagger.field_name(::Type{ MeterInfo }, property_name::Symbol) =  _property_map_MeterInfo[property_name]

function check_required(o::MeterInfo)
    true
end

function validate_property(::Type{ MeterInfo }, name::Symbol, val)
end
