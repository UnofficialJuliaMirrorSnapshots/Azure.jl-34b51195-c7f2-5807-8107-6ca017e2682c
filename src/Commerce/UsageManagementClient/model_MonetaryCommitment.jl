# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct MonetaryCommitment <: SwaggerModel
    Name::Any # spec type: Union{ Nothing, String } # spec name: Name
    EffectiveDate::Any # spec type: Union{ Nothing, DateTime } # spec name: EffectiveDate

    function MonetaryCommitment(;Name=nothing, EffectiveDate=nothing)
        o = new()
        validate_property(MonetaryCommitment, Symbol("Name"), Name)
        setfield!(o, Symbol("Name"), Name)
        validate_property(MonetaryCommitment, Symbol("EffectiveDate"), EffectiveDate)
        setfield!(o, Symbol("EffectiveDate"), EffectiveDate)
        o
    end
end # type MonetaryCommitment

const _property_map_MonetaryCommitment = Dict{Symbol,Symbol}(Symbol("Name")=>Symbol("Name"), Symbol("EffectiveDate")=>Symbol("EffectiveDate"))
const _property_types_MonetaryCommitment = Dict{Symbol,String}(Symbol("Name")=>"String", Symbol("EffectiveDate")=>"DateTime")
Base.propertynames(::Type{ MonetaryCommitment }) = collect(keys(_property_map_MonetaryCommitment))
Swagger.property_type(::Type{ MonetaryCommitment }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_MonetaryCommitment[name]))}
Swagger.field_name(::Type{ MonetaryCommitment }, property_name::Symbol) =  _property_map_MonetaryCommitment[property_name]

const _allowed_MonetaryCommitment_Name = ["Recurring Charge", "Monetary Commitment", "Monetary Credit"]

function check_required(o::MonetaryCommitment)
    true
end

function validate_property(::Type{ MonetaryCommitment }, name::Symbol, val)
    if name === Symbol("Name")
        Swagger.validate_param(name, "MonetaryCommitment", :enum, val, _allowed_MonetaryCommitment_Name)
    end
end
