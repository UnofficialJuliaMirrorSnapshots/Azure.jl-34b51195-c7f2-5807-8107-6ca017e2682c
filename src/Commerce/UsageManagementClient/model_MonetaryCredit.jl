# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct MonetaryCredit <: SwaggerModel
    Name::Any # spec type: Union{ Nothing, String } # spec name: Name
    EffectiveDate::Any # spec type: Union{ Nothing, DateTime } # spec name: EffectiveDate

    function MonetaryCredit(;Name=nothing, EffectiveDate=nothing)
        o = new()
        validate_property(MonetaryCredit, Symbol("Name"), Name)
        setfield!(o, Symbol("Name"), Name)
        validate_property(MonetaryCredit, Symbol("EffectiveDate"), EffectiveDate)
        setfield!(o, Symbol("EffectiveDate"), EffectiveDate)
        o
    end
end # type MonetaryCredit

const _property_map_MonetaryCredit = Dict{Symbol,Symbol}(Symbol("Name")=>Symbol("Name"), Symbol("EffectiveDate")=>Symbol("EffectiveDate"))
const _property_types_MonetaryCredit = Dict{Symbol,String}(Symbol("Name")=>"String", Symbol("EffectiveDate")=>"DateTime")
Base.propertynames(::Type{ MonetaryCredit }) = collect(keys(_property_map_MonetaryCredit))
Swagger.property_type(::Type{ MonetaryCredit }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_MonetaryCredit[name]))}
Swagger.field_name(::Type{ MonetaryCredit }, property_name::Symbol) =  _property_map_MonetaryCredit[property_name]

const _allowed_MonetaryCredit_Name = ["Recurring Charge", "Monetary Commitment", "Monetary Credit"]

function check_required(o::MonetaryCredit)
    true
end

function validate_property(::Type{ MonetaryCredit }, name::Symbol, val)
    if name === Symbol("Name")
        Swagger.validate_param(name, "MonetaryCredit", :enum, val, _allowed_MonetaryCredit_Name)
    end
end
