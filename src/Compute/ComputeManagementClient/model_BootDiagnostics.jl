# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct BootDiagnostics <: SwaggerModel
    enabled::Any # spec type: Union{ Nothing, Bool } # spec name: enabled
    storageUri::Any # spec type: Union{ Nothing, String } # spec name: storageUri

    function BootDiagnostics(;enabled=nothing, storageUri=nothing)
        o = new()
        validate_property(BootDiagnostics, Symbol("enabled"), enabled)
        setfield!(o, Symbol("enabled"), enabled)
        validate_property(BootDiagnostics, Symbol("storageUri"), storageUri)
        setfield!(o, Symbol("storageUri"), storageUri)
        o
    end
end # type BootDiagnostics

const _property_map_BootDiagnostics = Dict{Symbol,Symbol}(Symbol("enabled")=>Symbol("enabled"), Symbol("storageUri")=>Symbol("storageUri"))
const _property_types_BootDiagnostics = Dict{Symbol,String}(Symbol("enabled")=>"Bool", Symbol("storageUri")=>"String")
Base.propertynames(::Type{ BootDiagnostics }) = collect(keys(_property_map_BootDiagnostics))
Swagger.property_type(::Type{ BootDiagnostics }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_BootDiagnostics[name]))}
Swagger.field_name(::Type{ BootDiagnostics }, property_name::Symbol) =  _property_map_BootDiagnostics[property_name]

function check_required(o::BootDiagnostics)
    true
end

function validate_property(::Type{ BootDiagnostics }, name::Symbol, val)
end
