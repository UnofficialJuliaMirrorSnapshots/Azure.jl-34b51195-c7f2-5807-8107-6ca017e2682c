# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct DiskEncryptionSettings <: SwaggerModel
    diskEncryptionKey::Any # spec type: Union{ Nothing, KeyVaultSecretReference } # spec name: diskEncryptionKey
    keyEncryptionKey::Any # spec type: Union{ Nothing, KeyVaultKeyReference } # spec name: keyEncryptionKey
    enabled::Any # spec type: Union{ Nothing, Bool } # spec name: enabled

    function DiskEncryptionSettings(;diskEncryptionKey=nothing, keyEncryptionKey=nothing, enabled=nothing)
        o = new()
        validate_property(DiskEncryptionSettings, Symbol("diskEncryptionKey"), diskEncryptionKey)
        setfield!(o, Symbol("diskEncryptionKey"), diskEncryptionKey)
        validate_property(DiskEncryptionSettings, Symbol("keyEncryptionKey"), keyEncryptionKey)
        setfield!(o, Symbol("keyEncryptionKey"), keyEncryptionKey)
        validate_property(DiskEncryptionSettings, Symbol("enabled"), enabled)
        setfield!(o, Symbol("enabled"), enabled)
        o
    end
end # type DiskEncryptionSettings

const _property_map_DiskEncryptionSettings = Dict{Symbol,Symbol}(Symbol("diskEncryptionKey")=>Symbol("diskEncryptionKey"), Symbol("keyEncryptionKey")=>Symbol("keyEncryptionKey"), Symbol("enabled")=>Symbol("enabled"))
const _property_types_DiskEncryptionSettings = Dict{Symbol,String}(Symbol("diskEncryptionKey")=>"KeyVaultSecretReference", Symbol("keyEncryptionKey")=>"KeyVaultKeyReference", Symbol("enabled")=>"Bool")
Base.propertynames(::Type{ DiskEncryptionSettings }) = collect(keys(_property_map_DiskEncryptionSettings))
Swagger.property_type(::Type{ DiskEncryptionSettings }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_DiskEncryptionSettings[name]))}
Swagger.field_name(::Type{ DiskEncryptionSettings }, property_name::Symbol) =  _property_map_DiskEncryptionSettings[property_name]

function check_required(o::DiskEncryptionSettings)
    true
end

function validate_property(::Type{ DiskEncryptionSettings }, name::Symbol, val)
end
