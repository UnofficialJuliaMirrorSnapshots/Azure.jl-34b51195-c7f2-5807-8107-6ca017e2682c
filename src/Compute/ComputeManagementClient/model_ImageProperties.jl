# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ImageProperties <: SwaggerModel
    sourceVirtualMachine::Any # spec type: Union{ Nothing, SubResource } # spec name: sourceVirtualMachine
    storageProfile::Any # spec type: Union{ Nothing, ImageStorageProfile } # spec name: storageProfile
    provisioningState::Any # spec type: Union{ Nothing, String } # spec name: provisioningState

    function ImageProperties(;sourceVirtualMachine=nothing, storageProfile=nothing, provisioningState=nothing)
        o = new()
        validate_property(ImageProperties, Symbol("sourceVirtualMachine"), sourceVirtualMachine)
        setfield!(o, Symbol("sourceVirtualMachine"), sourceVirtualMachine)
        validate_property(ImageProperties, Symbol("storageProfile"), storageProfile)
        setfield!(o, Symbol("storageProfile"), storageProfile)
        validate_property(ImageProperties, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type ImageProperties

const _property_map_ImageProperties = Dict{Symbol,Symbol}(Symbol("sourceVirtualMachine")=>Symbol("sourceVirtualMachine"), Symbol("storageProfile")=>Symbol("storageProfile"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_ImageProperties = Dict{Symbol,String}(Symbol("sourceVirtualMachine")=>"SubResource", Symbol("storageProfile")=>"ImageStorageProfile", Symbol("provisioningState")=>"String")
Base.propertynames(::Type{ ImageProperties }) = collect(keys(_property_map_ImageProperties))
Swagger.property_type(::Type{ ImageProperties }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ImageProperties[name]))}
Swagger.field_name(::Type{ ImageProperties }, property_name::Symbol) =  _property_map_ImageProperties[property_name]

function check_required(o::ImageProperties)
    true
end

function validate_property(::Type{ ImageProperties }, name::Symbol, val)
end
