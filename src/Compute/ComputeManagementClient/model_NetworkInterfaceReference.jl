# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct NetworkInterfaceReference <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    properties::Any # spec type: Union{ Nothing, NetworkInterfaceReferenceProperties } # spec name: properties

    function NetworkInterfaceReference(;id=nothing, properties=nothing)
        o = new()
        validate_property(NetworkInterfaceReference, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(NetworkInterfaceReference, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        o
    end
end # type NetworkInterfaceReference

const _property_map_NetworkInterfaceReference = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("properties")=>Symbol("properties"))
const _property_types_NetworkInterfaceReference = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("properties")=>"NetworkInterfaceReferenceProperties")
Base.propertynames(::Type{ NetworkInterfaceReference }) = collect(keys(_property_map_NetworkInterfaceReference))
Swagger.property_type(::Type{ NetworkInterfaceReference }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_NetworkInterfaceReference[name]))}
Swagger.field_name(::Type{ NetworkInterfaceReference }, property_name::Symbol) =  _property_map_NetworkInterfaceReference[property_name]

function check_required(o::NetworkInterfaceReference)
    true
end

function validate_property(::Type{ NetworkInterfaceReference }, name::Symbol, val)
end
