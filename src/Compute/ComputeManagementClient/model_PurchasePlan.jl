# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct PurchasePlan <: SwaggerModel
    publisher::Any # spec type: Union{ Nothing, String } # spec name: publisher
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    product::Any # spec type: Union{ Nothing, String } # spec name: product

    function PurchasePlan(;publisher=nothing, name=nothing, product=nothing)
        o = new()
        validate_property(PurchasePlan, Symbol("publisher"), publisher)
        setfield!(o, Symbol("publisher"), publisher)
        validate_property(PurchasePlan, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(PurchasePlan, Symbol("product"), product)
        setfield!(o, Symbol("product"), product)
        o
    end
end # type PurchasePlan

const _property_map_PurchasePlan = Dict{Symbol,Symbol}(Symbol("publisher")=>Symbol("publisher"), Symbol("name")=>Symbol("name"), Symbol("product")=>Symbol("product"))
const _property_types_PurchasePlan = Dict{Symbol,String}(Symbol("publisher")=>"String", Symbol("name")=>"String", Symbol("product")=>"String")
Base.propertynames(::Type{ PurchasePlan }) = collect(keys(_property_map_PurchasePlan))
Swagger.property_type(::Type{ PurchasePlan }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_PurchasePlan[name]))}
Swagger.field_name(::Type{ PurchasePlan }, property_name::Symbol) =  _property_map_PurchasePlan[property_name]

function check_required(o::PurchasePlan)
    (getproperty(o, Symbol("publisher")) === nothing) && (return false)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    (getproperty(o, Symbol("product")) === nothing) && (return false)
    true
end

function validate_property(::Type{ PurchasePlan }, name::Symbol, val)
end
