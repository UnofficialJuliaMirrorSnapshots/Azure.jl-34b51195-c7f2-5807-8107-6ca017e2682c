# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ResourceSku <: SwaggerModel
    resourceType::Any # spec type: Union{ Nothing, String } # spec name: resourceType
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    tier::Any # spec type: Union{ Nothing, String } # spec name: tier
    size::Any # spec type: Union{ Nothing, String } # spec name: size
    family::Any # spec type: Union{ Nothing, String } # spec name: family
    kind::Any # spec type: Union{ Nothing, String } # spec name: kind
    capacity::Any # spec type: Union{ Nothing, ResourceSkuCapacity } # spec name: capacity
    locations::Any # spec type: Union{ Nothing, Vector{String} } # spec name: locations
    apiVersions::Any # spec type: Union{ Nothing, Vector{String} } # spec name: apiVersions
    costs::Any # spec type: Union{ Nothing, Vector{ResourceSkuCosts} } # spec name: costs
    capabilities::Any # spec type: Union{ Nothing, Vector{ResourceSkuCapabilities} } # spec name: capabilities
    restrictions::Any # spec type: Union{ Nothing, Vector{ResourceSkuRestrictions} } # spec name: restrictions

    function ResourceSku(;resourceType=nothing, name=nothing, tier=nothing, size=nothing, family=nothing, kind=nothing, capacity=nothing, locations=nothing, apiVersions=nothing, costs=nothing, capabilities=nothing, restrictions=nothing)
        o = new()
        validate_property(ResourceSku, Symbol("resourceType"), resourceType)
        setfield!(o, Symbol("resourceType"), resourceType)
        validate_property(ResourceSku, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(ResourceSku, Symbol("tier"), tier)
        setfield!(o, Symbol("tier"), tier)
        validate_property(ResourceSku, Symbol("size"), size)
        setfield!(o, Symbol("size"), size)
        validate_property(ResourceSku, Symbol("family"), family)
        setfield!(o, Symbol("family"), family)
        validate_property(ResourceSku, Symbol("kind"), kind)
        setfield!(o, Symbol("kind"), kind)
        validate_property(ResourceSku, Symbol("capacity"), capacity)
        setfield!(o, Symbol("capacity"), capacity)
        validate_property(ResourceSku, Symbol("locations"), locations)
        setfield!(o, Symbol("locations"), locations)
        validate_property(ResourceSku, Symbol("apiVersions"), apiVersions)
        setfield!(o, Symbol("apiVersions"), apiVersions)
        validate_property(ResourceSku, Symbol("costs"), costs)
        setfield!(o, Symbol("costs"), costs)
        validate_property(ResourceSku, Symbol("capabilities"), capabilities)
        setfield!(o, Symbol("capabilities"), capabilities)
        validate_property(ResourceSku, Symbol("restrictions"), restrictions)
        setfield!(o, Symbol("restrictions"), restrictions)
        o
    end
end # type ResourceSku

const _property_map_ResourceSku = Dict{Symbol,Symbol}(Symbol("resourceType")=>Symbol("resourceType"), Symbol("name")=>Symbol("name"), Symbol("tier")=>Symbol("tier"), Symbol("size")=>Symbol("size"), Symbol("family")=>Symbol("family"), Symbol("kind")=>Symbol("kind"), Symbol("capacity")=>Symbol("capacity"), Symbol("locations")=>Symbol("locations"), Symbol("apiVersions")=>Symbol("apiVersions"), Symbol("costs")=>Symbol("costs"), Symbol("capabilities")=>Symbol("capabilities"), Symbol("restrictions")=>Symbol("restrictions"))
const _property_types_ResourceSku = Dict{Symbol,String}(Symbol("resourceType")=>"String", Symbol("name")=>"String", Symbol("tier")=>"String", Symbol("size")=>"String", Symbol("family")=>"String", Symbol("kind")=>"String", Symbol("capacity")=>"ResourceSkuCapacity", Symbol("locations")=>"Vector{String}", Symbol("apiVersions")=>"Vector{String}", Symbol("costs")=>"Vector{ResourceSkuCosts}", Symbol("capabilities")=>"Vector{ResourceSkuCapabilities}", Symbol("restrictions")=>"Vector{ResourceSkuRestrictions}")
Base.propertynames(::Type{ ResourceSku }) = collect(keys(_property_map_ResourceSku))
Swagger.property_type(::Type{ ResourceSku }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ResourceSku[name]))}
Swagger.field_name(::Type{ ResourceSku }, property_name::Symbol) =  _property_map_ResourceSku[property_name]

function check_required(o::ResourceSku)
    true
end

function validate_property(::Type{ ResourceSku }, name::Symbol, val)
end
