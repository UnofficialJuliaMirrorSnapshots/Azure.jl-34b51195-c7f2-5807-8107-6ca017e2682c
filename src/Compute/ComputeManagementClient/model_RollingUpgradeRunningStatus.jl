# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct RollingUpgradeRunningStatus <: SwaggerModel
    code::Any # spec type: Union{ Nothing, String } # spec name: code
    startTime::Any # spec type: Union{ Nothing, DateTime } # spec name: startTime
    lastAction::Any # spec type: Union{ Nothing, String } # spec name: lastAction
    lastActionTime::Any # spec type: Union{ Nothing, DateTime } # spec name: lastActionTime

    function RollingUpgradeRunningStatus(;code=nothing, startTime=nothing, lastAction=nothing, lastActionTime=nothing)
        o = new()
        validate_property(RollingUpgradeRunningStatus, Symbol("code"), code)
        setfield!(o, Symbol("code"), code)
        validate_property(RollingUpgradeRunningStatus, Symbol("startTime"), startTime)
        setfield!(o, Symbol("startTime"), startTime)
        validate_property(RollingUpgradeRunningStatus, Symbol("lastAction"), lastAction)
        setfield!(o, Symbol("lastAction"), lastAction)
        validate_property(RollingUpgradeRunningStatus, Symbol("lastActionTime"), lastActionTime)
        setfield!(o, Symbol("lastActionTime"), lastActionTime)
        o
    end
end # type RollingUpgradeRunningStatus

const _property_map_RollingUpgradeRunningStatus = Dict{Symbol,Symbol}(Symbol("code")=>Symbol("code"), Symbol("startTime")=>Symbol("startTime"), Symbol("lastAction")=>Symbol("lastAction"), Symbol("lastActionTime")=>Symbol("lastActionTime"))
const _property_types_RollingUpgradeRunningStatus = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("startTime")=>"DateTime", Symbol("lastAction")=>"String", Symbol("lastActionTime")=>"DateTime")
Base.propertynames(::Type{ RollingUpgradeRunningStatus }) = collect(keys(_property_map_RollingUpgradeRunningStatus))
Swagger.property_type(::Type{ RollingUpgradeRunningStatus }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_RollingUpgradeRunningStatus[name]))}
Swagger.field_name(::Type{ RollingUpgradeRunningStatus }, property_name::Symbol) =  _property_map_RollingUpgradeRunningStatus[property_name]

const _allowed_RollingUpgradeRunningStatus_code = ["RollingForward", "Cancelled", "Completed", "Faulted"]

const _allowed_RollingUpgradeRunningStatus_lastAction = ["Start", "Cancel"]

function check_required(o::RollingUpgradeRunningStatus)
    true
end

function validate_property(::Type{ RollingUpgradeRunningStatus }, name::Symbol, val)
    if name === Symbol("code")
        Swagger.validate_param(name, "RollingUpgradeRunningStatus", :enum, val, _allowed_RollingUpgradeRunningStatus_code)
    end
    if name === Symbol("lastAction")
        Swagger.validate_param(name, "RollingUpgradeRunningStatus", :enum, val, _allowed_RollingUpgradeRunningStatus_lastAction)
    end
end
