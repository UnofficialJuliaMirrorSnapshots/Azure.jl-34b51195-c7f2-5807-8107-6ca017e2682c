# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct VirtualMachine <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    location::Any # spec type: Union{ Nothing, String } # spec name: location
    tags::Any # spec type: Union{ Nothing, Dict{String, String} } # spec name: tags
    plan::Any # spec type: Union{ Nothing, Plan } # spec name: plan
    properties::Any # spec type: Union{ Nothing, VirtualMachineProperties } # spec name: properties
    resources::Any # spec type: Union{ Nothing, Vector{VirtualMachineExtension} } # spec name: resources
    identity::Any # spec type: Union{ Nothing, VirtualMachineIdentity } # spec name: identity
    zones::Any # spec type: Union{ Nothing, Vector{String} } # spec name: zones

    function VirtualMachine(;id=nothing, name=nothing, type=nothing, location=nothing, tags=nothing, plan=nothing, properties=nothing, resources=nothing, identity=nothing, zones=nothing)
        o = new()
        validate_property(VirtualMachine, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(VirtualMachine, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(VirtualMachine, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(VirtualMachine, Symbol("location"), location)
        setfield!(o, Symbol("location"), location)
        validate_property(VirtualMachine, Symbol("tags"), tags)
        setfield!(o, Symbol("tags"), tags)
        validate_property(VirtualMachine, Symbol("plan"), plan)
        setfield!(o, Symbol("plan"), plan)
        validate_property(VirtualMachine, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        validate_property(VirtualMachine, Symbol("resources"), resources)
        setfield!(o, Symbol("resources"), resources)
        validate_property(VirtualMachine, Symbol("identity"), identity)
        setfield!(o, Symbol("identity"), identity)
        validate_property(VirtualMachine, Symbol("zones"), zones)
        setfield!(o, Symbol("zones"), zones)
        o
    end
end # type VirtualMachine

const _property_map_VirtualMachine = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), Symbol("type")=>Symbol("type"), Symbol("location")=>Symbol("location"), Symbol("tags")=>Symbol("tags"), Symbol("plan")=>Symbol("plan"), Symbol("properties")=>Symbol("properties"), Symbol("resources")=>Symbol("resources"), Symbol("identity")=>Symbol("identity"), Symbol("zones")=>Symbol("zones"))
const _property_types_VirtualMachine = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("name")=>"String", Symbol("type")=>"String", Symbol("location")=>"String", Symbol("tags")=>"Dict{String, String}", Symbol("plan")=>"Plan", Symbol("properties")=>"VirtualMachineProperties", Symbol("resources")=>"Vector{VirtualMachineExtension}", Symbol("identity")=>"VirtualMachineIdentity", Symbol("zones")=>"Vector{String}")
Base.propertynames(::Type{ VirtualMachine }) = collect(keys(_property_map_VirtualMachine))
Swagger.property_type(::Type{ VirtualMachine }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_VirtualMachine[name]))}
Swagger.field_name(::Type{ VirtualMachine }, property_name::Symbol) =  _property_map_VirtualMachine[property_name]

function check_required(o::VirtualMachine)
    (getproperty(o, Symbol("location")) === nothing) && (return false)
    true
end

function validate_property(::Type{ VirtualMachine }, name::Symbol, val)
end
