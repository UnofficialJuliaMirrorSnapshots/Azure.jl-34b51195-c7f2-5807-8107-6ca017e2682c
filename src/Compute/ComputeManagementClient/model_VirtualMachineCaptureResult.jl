# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct VirtualMachineCaptureResult <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    properties::Any # spec type: Union{ Nothing, VirtualMachineCaptureResultProperties } # spec name: properties

    function VirtualMachineCaptureResult(;id=nothing, properties=nothing)
        o = new()
        validate_property(VirtualMachineCaptureResult, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(VirtualMachineCaptureResult, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        o
    end
end # type VirtualMachineCaptureResult

const _property_map_VirtualMachineCaptureResult = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("properties")=>Symbol("properties"))
const _property_types_VirtualMachineCaptureResult = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("properties")=>"VirtualMachineCaptureResultProperties")
Base.propertynames(::Type{ VirtualMachineCaptureResult }) = collect(keys(_property_map_VirtualMachineCaptureResult))
Swagger.property_type(::Type{ VirtualMachineCaptureResult }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_VirtualMachineCaptureResult[name]))}
Swagger.field_name(::Type{ VirtualMachineCaptureResult }, property_name::Symbol) =  _property_map_VirtualMachineCaptureResult[property_name]

function check_required(o::VirtualMachineCaptureResult)
    true
end

function validate_property(::Type{ VirtualMachineCaptureResult }, name::Symbol, val)
end
