# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct VirtualMachineScaleSetOSDisk <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    caching::Any # spec type: Union{ Nothing, Caching } # spec name: caching
    createOption::Any # spec type: Union{ Nothing, CreateOption } # spec name: createOption
    osType::Any # spec type: Union{ Nothing, String } # spec name: osType
    image::Any # spec type: Union{ Nothing, VirtualHardDisk } # spec name: image
    vhdContainers::Any # spec type: Union{ Nothing, Vector{String} } # spec name: vhdContainers
    managedDisk::Any # spec type: Union{ Nothing, VirtualMachineScaleSetManagedDiskParameters } # spec name: managedDisk

    function VirtualMachineScaleSetOSDisk(;name=nothing, caching=nothing, createOption=nothing, osType=nothing, image=nothing, vhdContainers=nothing, managedDisk=nothing)
        o = new()
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("caching"), caching)
        setfield!(o, Symbol("caching"), caching)
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("createOption"), createOption)
        setfield!(o, Symbol("createOption"), createOption)
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("osType"), osType)
        setfield!(o, Symbol("osType"), osType)
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("image"), image)
        setfield!(o, Symbol("image"), image)
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("vhdContainers"), vhdContainers)
        setfield!(o, Symbol("vhdContainers"), vhdContainers)
        validate_property(VirtualMachineScaleSetOSDisk, Symbol("managedDisk"), managedDisk)
        setfield!(o, Symbol("managedDisk"), managedDisk)
        o
    end
end # type VirtualMachineScaleSetOSDisk

const _property_map_VirtualMachineScaleSetOSDisk = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("caching")=>Symbol("caching"), Symbol("createOption")=>Symbol("createOption"), Symbol("osType")=>Symbol("osType"), Symbol("image")=>Symbol("image"), Symbol("vhdContainers")=>Symbol("vhdContainers"), Symbol("managedDisk")=>Symbol("managedDisk"))
const _property_types_VirtualMachineScaleSetOSDisk = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("caching")=>"Caching", Symbol("createOption")=>"CreateOption", Symbol("osType")=>"String", Symbol("image")=>"VirtualHardDisk", Symbol("vhdContainers")=>"Vector{String}", Symbol("managedDisk")=>"VirtualMachineScaleSetManagedDiskParameters")
Base.propertynames(::Type{ VirtualMachineScaleSetOSDisk }) = collect(keys(_property_map_VirtualMachineScaleSetOSDisk))
Swagger.property_type(::Type{ VirtualMachineScaleSetOSDisk }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_VirtualMachineScaleSetOSDisk[name]))}
Swagger.field_name(::Type{ VirtualMachineScaleSetOSDisk }, property_name::Symbol) =  _property_map_VirtualMachineScaleSetOSDisk[property_name]

const _allowed_VirtualMachineScaleSetOSDisk_osType = ["Windows", "Linux"]

function check_required(o::VirtualMachineScaleSetOSDisk)
    (getproperty(o, Symbol("createOption")) === nothing) && (return false)
    true
end

function validate_property(::Type{ VirtualMachineScaleSetOSDisk }, name::Symbol, val)
    if name === Symbol("osType")
        Swagger.validate_param(name, "VirtualMachineScaleSetOSDisk", :enum, val, _allowed_VirtualMachineScaleSetOSDisk_osType)
    end
end
