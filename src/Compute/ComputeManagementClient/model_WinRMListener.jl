# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct WinRMListener <: SwaggerModel
    protocol::Any # spec type: Union{ Nothing, String } # spec name: protocol
    certificateUrl::Any # spec type: Union{ Nothing, String } # spec name: certificateUrl

    function WinRMListener(;protocol=nothing, certificateUrl=nothing)
        o = new()
        validate_property(WinRMListener, Symbol("protocol"), protocol)
        setfield!(o, Symbol("protocol"), protocol)
        validate_property(WinRMListener, Symbol("certificateUrl"), certificateUrl)
        setfield!(o, Symbol("certificateUrl"), certificateUrl)
        o
    end
end # type WinRMListener

const _property_map_WinRMListener = Dict{Symbol,Symbol}(Symbol("protocol")=>Symbol("protocol"), Symbol("certificateUrl")=>Symbol("certificateUrl"))
const _property_types_WinRMListener = Dict{Symbol,String}(Symbol("protocol")=>"String", Symbol("certificateUrl")=>"String")
Base.propertynames(::Type{ WinRMListener }) = collect(keys(_property_map_WinRMListener))
Swagger.property_type(::Type{ WinRMListener }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_WinRMListener[name]))}
Swagger.field_name(::Type{ WinRMListener }, property_name::Symbol) =  _property_map_WinRMListener[property_name]

const _allowed_WinRMListener_protocol = ["Http", "Https"]

function check_required(o::WinRMListener)
    true
end

function validate_property(::Type{ WinRMListener }, name::Symbol, val)
    if name === Symbol("protocol")
        Swagger.validate_param(name, "WinRMListener", :enum, val, _allowed_WinRMListener_protocol)
    end
end
