# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ContainerServiceOrchestratorProfile <: SwaggerModel
    orchestratorType::Any # spec type: Union{ Nothing, String } # spec name: orchestratorType

    function ContainerServiceOrchestratorProfile(;orchestratorType=nothing)
        o = new()
        validate_property(ContainerServiceOrchestratorProfile, Symbol("orchestratorType"), orchestratorType)
        setfield!(o, Symbol("orchestratorType"), orchestratorType)
        o
    end
end # type ContainerServiceOrchestratorProfile

const _property_map_ContainerServiceOrchestratorProfile = Dict{Symbol,Symbol}(Symbol("orchestratorType")=>Symbol("orchestratorType"))
const _property_types_ContainerServiceOrchestratorProfile = Dict{Symbol,String}(Symbol("orchestratorType")=>"String")
Base.propertynames(::Type{ ContainerServiceOrchestratorProfile }) = collect(keys(_property_map_ContainerServiceOrchestratorProfile))
Swagger.property_type(::Type{ ContainerServiceOrchestratorProfile }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ContainerServiceOrchestratorProfile[name]))}
Swagger.field_name(::Type{ ContainerServiceOrchestratorProfile }, property_name::Symbol) =  _property_map_ContainerServiceOrchestratorProfile[property_name]

const _allowed_ContainerServiceOrchestratorProfile_orchestratorType = ["Swarm", "DCOS", "Custom", "Kubernetes"]

function check_required(o::ContainerServiceOrchestratorProfile)
    true
end

function validate_property(::Type{ ContainerServiceOrchestratorProfile }, name::Symbol, val)
    if name === Symbol("orchestratorType")
        Swagger.validate_param(name, "ContainerServiceOrchestratorProfile", :enum, val, _allowed_ContainerServiceOrchestratorProfile_orchestratorType)
    end
end
