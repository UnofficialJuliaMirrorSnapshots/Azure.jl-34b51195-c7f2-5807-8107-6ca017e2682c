# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ImageDiskReference <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    lun::Any # spec type: Union{ Nothing, Int32 } # spec name: lun

    function ImageDiskReference(;id=nothing, lun=nothing)
        o = new()
        validate_property(ImageDiskReference, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(ImageDiskReference, Symbol("lun"), lun)
        setfield!(o, Symbol("lun"), lun)
        o
    end
end # type ImageDiskReference

const _property_map_ImageDiskReference = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("lun")=>Symbol("lun"))
const _property_types_ImageDiskReference = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("lun")=>"Int32")
Base.propertynames(::Type{ ImageDiskReference }) = collect(keys(_property_map_ImageDiskReference))
Swagger.property_type(::Type{ ImageDiskReference }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ImageDiskReference[name]))}
Swagger.field_name(::Type{ ImageDiskReference }, property_name::Symbol) =  _property_map_ImageDiskReference[property_name]

function check_required(o::ImageDiskReference)
    (getproperty(o, Symbol("id")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ImageDiskReference }, name::Symbol, val)
end
