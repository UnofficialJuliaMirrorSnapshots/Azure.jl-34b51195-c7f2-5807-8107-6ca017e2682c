# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct RunCommandDocumentBase <: SwaggerModel
    schema::Any # spec type: Union{ Nothing, String } # spec name: \$schema
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    osType::Any # spec type: Union{ Nothing, String } # spec name: osType
    label::Any # spec type: Union{ Nothing, String } # spec name: label
    description::Any # spec type: Union{ Nothing, String } # spec name: description

    function RunCommandDocumentBase(;schema=nothing, id=nothing, osType=nothing, label=nothing, description=nothing)
        o = new()
        validate_property(RunCommandDocumentBase, Symbol("\$schema"), schema)
        setfield!(o, Symbol("schema"), schema)
        validate_property(RunCommandDocumentBase, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(RunCommandDocumentBase, Symbol("osType"), osType)
        setfield!(o, Symbol("osType"), osType)
        validate_property(RunCommandDocumentBase, Symbol("label"), label)
        setfield!(o, Symbol("label"), label)
        validate_property(RunCommandDocumentBase, Symbol("description"), description)
        setfield!(o, Symbol("description"), description)
        o
    end
end # type RunCommandDocumentBase

const _property_map_RunCommandDocumentBase = Dict{Symbol,Symbol}(Symbol("\$schema")=>Symbol("schema"), Symbol("id")=>Symbol("id"), Symbol("osType")=>Symbol("osType"), Symbol("label")=>Symbol("label"), Symbol("description")=>Symbol("description"))
const _property_types_RunCommandDocumentBase = Dict{Symbol,String}(Symbol("\$schema")=>"String", Symbol("id")=>"String", Symbol("osType")=>"String", Symbol("label")=>"String", Symbol("description")=>"String")
Base.propertynames(::Type{ RunCommandDocumentBase }) = collect(keys(_property_map_RunCommandDocumentBase))
Swagger.property_type(::Type{ RunCommandDocumentBase }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_RunCommandDocumentBase[name]))}
Swagger.field_name(::Type{ RunCommandDocumentBase }, property_name::Symbol) =  _property_map_RunCommandDocumentBase[property_name]

const _allowed_RunCommandDocumentBase_osType = ["Windows", "Linux"]

function check_required(o::RunCommandDocumentBase)
    (getproperty(o, Symbol("\$schema")) === nothing) && (return false)
    (getproperty(o, Symbol("id")) === nothing) && (return false)
    (getproperty(o, Symbol("label")) === nothing) && (return false)
    (getproperty(o, Symbol("description")) === nothing) && (return false)
    true
end

function validate_property(::Type{ RunCommandDocumentBase }, name::Symbol, val)
    if name === Symbol("osType")
        Swagger.validate_param(name, "RunCommandDocumentBase", :enum, val, _allowed_RunCommandDocumentBase_osType)
    end
end
