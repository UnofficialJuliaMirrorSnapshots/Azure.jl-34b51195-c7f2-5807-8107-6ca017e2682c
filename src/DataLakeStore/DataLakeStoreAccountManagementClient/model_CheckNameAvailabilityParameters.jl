# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct CheckNameAvailabilityParameters <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    type::Any # spec type: Union{ Nothing, String } # spec name: type

    function CheckNameAvailabilityParameters(;name=nothing, type=nothing)
        o = new()
        validate_property(CheckNameAvailabilityParameters, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(CheckNameAvailabilityParameters, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        o
    end
end # type CheckNameAvailabilityParameters

const _property_map_CheckNameAvailabilityParameters = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("type")=>Symbol("type"))
const _property_types_CheckNameAvailabilityParameters = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("type")=>"String")
Base.propertynames(::Type{ CheckNameAvailabilityParameters }) = collect(keys(_property_map_CheckNameAvailabilityParameters))
Swagger.property_type(::Type{ CheckNameAvailabilityParameters }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_CheckNameAvailabilityParameters[name]))}
Swagger.field_name(::Type{ CheckNameAvailabilityParameters }, property_name::Symbol) =  _property_map_CheckNameAvailabilityParameters[property_name]

const _allowed_CheckNameAvailabilityParameters_type = ["Microsoft.DataLakeStore/accounts"]

function check_required(o::CheckNameAvailabilityParameters)
    (getproperty(o, Symbol("name")) === nothing) && (return false)
    true
end

function validate_property(::Type{ CheckNameAvailabilityParameters }, name::Symbol, val)
    if name === Symbol("type")
        Swagger.validate_param(name, "CheckNameAvailabilityParameters", :enum, val, _allowed_CheckNameAvailabilityParameters_type)
    end
end
