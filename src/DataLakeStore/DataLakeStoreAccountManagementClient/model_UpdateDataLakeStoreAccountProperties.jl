# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct UpdateDataLakeStoreAccountProperties <: SwaggerModel
    firewallState::Any # spec type: Union{ Nothing, String } # spec name: firewallState
    trustedIdProviderState::Any # spec type: Union{ Nothing, String } # spec name: trustedIdProviderState
    defaultGroup::Any # spec type: Union{ Nothing, String } # spec name: defaultGroup
    newTier::Any # spec type: Union{ Nothing, String } # spec name: newTier
    firewallAllowAzureIps::Any # spec type: Union{ Nothing, String } # spec name: firewallAllowAzureIps
    encryptionConfig::Any # spec type: Union{ Nothing, UpdateEncryptionConfig } # spec name: encryptionConfig

    function UpdateDataLakeStoreAccountProperties(;firewallState=nothing, trustedIdProviderState=nothing, defaultGroup=nothing, newTier=nothing, firewallAllowAzureIps=nothing, encryptionConfig=nothing)
        o = new()
        validate_property(UpdateDataLakeStoreAccountProperties, Symbol("firewallState"), firewallState)
        setfield!(o, Symbol("firewallState"), firewallState)
        validate_property(UpdateDataLakeStoreAccountProperties, Symbol("trustedIdProviderState"), trustedIdProviderState)
        setfield!(o, Symbol("trustedIdProviderState"), trustedIdProviderState)
        validate_property(UpdateDataLakeStoreAccountProperties, Symbol("defaultGroup"), defaultGroup)
        setfield!(o, Symbol("defaultGroup"), defaultGroup)
        validate_property(UpdateDataLakeStoreAccountProperties, Symbol("newTier"), newTier)
        setfield!(o, Symbol("newTier"), newTier)
        validate_property(UpdateDataLakeStoreAccountProperties, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        setfield!(o, Symbol("firewallAllowAzureIps"), firewallAllowAzureIps)
        validate_property(UpdateDataLakeStoreAccountProperties, Symbol("encryptionConfig"), encryptionConfig)
        setfield!(o, Symbol("encryptionConfig"), encryptionConfig)
        o
    end
end # type UpdateDataLakeStoreAccountProperties

const _property_map_UpdateDataLakeStoreAccountProperties = Dict{Symbol,Symbol}(Symbol("firewallState")=>Symbol("firewallState"), Symbol("trustedIdProviderState")=>Symbol("trustedIdProviderState"), Symbol("defaultGroup")=>Symbol("defaultGroup"), Symbol("newTier")=>Symbol("newTier"), Symbol("firewallAllowAzureIps")=>Symbol("firewallAllowAzureIps"), Symbol("encryptionConfig")=>Symbol("encryptionConfig"))
const _property_types_UpdateDataLakeStoreAccountProperties = Dict{Symbol,String}(Symbol("firewallState")=>"String", Symbol("trustedIdProviderState")=>"String", Symbol("defaultGroup")=>"String", Symbol("newTier")=>"String", Symbol("firewallAllowAzureIps")=>"String", Symbol("encryptionConfig")=>"UpdateEncryptionConfig")
Base.propertynames(::Type{ UpdateDataLakeStoreAccountProperties }) = collect(keys(_property_map_UpdateDataLakeStoreAccountProperties))
Swagger.property_type(::Type{ UpdateDataLakeStoreAccountProperties }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_UpdateDataLakeStoreAccountProperties[name]))}
Swagger.field_name(::Type{ UpdateDataLakeStoreAccountProperties }, property_name::Symbol) =  _property_map_UpdateDataLakeStoreAccountProperties[property_name]

const _allowed_UpdateDataLakeStoreAccountProperties_firewallState = ["Enabled", "Disabled"]

const _allowed_UpdateDataLakeStoreAccountProperties_trustedIdProviderState = ["Enabled", "Disabled"]

const _allowed_UpdateDataLakeStoreAccountProperties_newTier = ["Consumption", "Commitment_1TB", "Commitment_10TB", "Commitment_100TB", "Commitment_500TB", "Commitment_1PB", "Commitment_5PB"]

const _allowed_UpdateDataLakeStoreAccountProperties_firewallAllowAzureIps = ["Enabled", "Disabled"]

function check_required(o::UpdateDataLakeStoreAccountProperties)
    true
end

function validate_property(::Type{ UpdateDataLakeStoreAccountProperties }, name::Symbol, val)
    if name === Symbol("firewallState")
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_firewallState)
    end
    if name === Symbol("trustedIdProviderState")
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_trustedIdProviderState)
    end
    if name === Symbol("newTier")
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_newTier)
    end
    if name === Symbol("firewallAllowAzureIps")
        Swagger.validate_param(name, "UpdateDataLakeStoreAccountProperties", :enum, val, _allowed_UpdateDataLakeStoreAccountProperties_firewallAllowAzureIps)
    end
end
