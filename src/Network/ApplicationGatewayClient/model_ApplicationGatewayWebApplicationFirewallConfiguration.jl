# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ApplicationGatewayWebApplicationFirewallConfiguration <: SwaggerModel
    enabled::Any # spec type: Union{ Nothing, Bool } # spec name: enabled
    firewallMode::Any # spec type: Union{ Nothing, String } # spec name: firewallMode
    ruleSetType::Any # spec type: Union{ Nothing, String } # spec name: ruleSetType
    ruleSetVersion::Any # spec type: Union{ Nothing, String } # spec name: ruleSetVersion
    disabledRuleGroups::Any # spec type: Union{ Nothing, Vector{ApplicationGatewayFirewallDisabledRuleGroup} } # spec name: disabledRuleGroups

    function ApplicationGatewayWebApplicationFirewallConfiguration(;enabled=nothing, firewallMode=nothing, ruleSetType=nothing, ruleSetVersion=nothing, disabledRuleGroups=nothing)
        o = new()
        validate_property(ApplicationGatewayWebApplicationFirewallConfiguration, Symbol("enabled"), enabled)
        setfield!(o, Symbol("enabled"), enabled)
        validate_property(ApplicationGatewayWebApplicationFirewallConfiguration, Symbol("firewallMode"), firewallMode)
        setfield!(o, Symbol("firewallMode"), firewallMode)
        validate_property(ApplicationGatewayWebApplicationFirewallConfiguration, Symbol("ruleSetType"), ruleSetType)
        setfield!(o, Symbol("ruleSetType"), ruleSetType)
        validate_property(ApplicationGatewayWebApplicationFirewallConfiguration, Symbol("ruleSetVersion"), ruleSetVersion)
        setfield!(o, Symbol("ruleSetVersion"), ruleSetVersion)
        validate_property(ApplicationGatewayWebApplicationFirewallConfiguration, Symbol("disabledRuleGroups"), disabledRuleGroups)
        setfield!(o, Symbol("disabledRuleGroups"), disabledRuleGroups)
        o
    end
end # type ApplicationGatewayWebApplicationFirewallConfiguration

const _property_map_ApplicationGatewayWebApplicationFirewallConfiguration = Dict{Symbol,Symbol}(Symbol("enabled")=>Symbol("enabled"), Symbol("firewallMode")=>Symbol("firewallMode"), Symbol("ruleSetType")=>Symbol("ruleSetType"), Symbol("ruleSetVersion")=>Symbol("ruleSetVersion"), Symbol("disabledRuleGroups")=>Symbol("disabledRuleGroups"))
const _property_types_ApplicationGatewayWebApplicationFirewallConfiguration = Dict{Symbol,String}(Symbol("enabled")=>"Bool", Symbol("firewallMode")=>"String", Symbol("ruleSetType")=>"String", Symbol("ruleSetVersion")=>"String", Symbol("disabledRuleGroups")=>"Vector{ApplicationGatewayFirewallDisabledRuleGroup}")
Base.propertynames(::Type{ ApplicationGatewayWebApplicationFirewallConfiguration }) = collect(keys(_property_map_ApplicationGatewayWebApplicationFirewallConfiguration))
Swagger.property_type(::Type{ ApplicationGatewayWebApplicationFirewallConfiguration }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ApplicationGatewayWebApplicationFirewallConfiguration[name]))}
Swagger.field_name(::Type{ ApplicationGatewayWebApplicationFirewallConfiguration }, property_name::Symbol) =  _property_map_ApplicationGatewayWebApplicationFirewallConfiguration[property_name]

const _allowed_ApplicationGatewayWebApplicationFirewallConfiguration_firewallMode = ["Detection", "Prevention"]

function check_required(o::ApplicationGatewayWebApplicationFirewallConfiguration)
    (getproperty(o, Symbol("enabled")) === nothing) && (return false)
    (getproperty(o, Symbol("ruleSetType")) === nothing) && (return false)
    (getproperty(o, Symbol("ruleSetVersion")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ApplicationGatewayWebApplicationFirewallConfiguration }, name::Symbol, val)
    if name === Symbol("firewallMode")
        Swagger.validate_param(name, "ApplicationGatewayWebApplicationFirewallConfiguration", :enum, val, _allowed_ApplicationGatewayWebApplicationFirewallConfiguration_firewallMode)
    end
end
