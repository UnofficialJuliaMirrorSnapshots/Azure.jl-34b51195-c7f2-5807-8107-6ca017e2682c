# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct DnsNameAvailabilityResult <: SwaggerModel
    available::Any # spec type: Union{ Nothing, Bool } # spec name: available

    function DnsNameAvailabilityResult(;available=nothing)
        o = new()
        validate_property(DnsNameAvailabilityResult, Symbol("available"), available)
        setfield!(o, Symbol("available"), available)
        o
    end
end # type DnsNameAvailabilityResult

const _property_map_DnsNameAvailabilityResult = Dict{Symbol,Symbol}(Symbol("available")=>Symbol("available"))
const _property_types_DnsNameAvailabilityResult = Dict{Symbol,String}(Symbol("available")=>"Bool")
Base.propertynames(::Type{ DnsNameAvailabilityResult }) = collect(keys(_property_map_DnsNameAvailabilityResult))
Swagger.property_type(::Type{ DnsNameAvailabilityResult }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_DnsNameAvailabilityResult[name]))}
Swagger.field_name(::Type{ DnsNameAvailabilityResult }, property_name::Symbol) =  _property_map_DnsNameAvailabilityResult[property_name]

function check_required(o::DnsNameAvailabilityResult)
    true
end

function validate_property(::Type{ DnsNameAvailabilityResult }, name::Symbol, val)
end
