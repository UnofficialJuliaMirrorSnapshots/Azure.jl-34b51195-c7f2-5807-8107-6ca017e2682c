# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct OutboundNatRulePropertiesFormat <: SwaggerModel
    allocatedOutboundPorts::Any # spec type: Union{ Nothing, Int32 } # spec name: allocatedOutboundPorts
    frontendIPConfigurations::Any # spec type: Union{ Nothing, Vector{SubResource} } # spec name: frontendIPConfigurations
    backendAddressPool::Any # spec type: Union{ Nothing, SubResource } # spec name: backendAddressPool
    provisioningState::Any # spec type: Union{ Nothing, String } # spec name: provisioningState

    function OutboundNatRulePropertiesFormat(;allocatedOutboundPorts=nothing, frontendIPConfigurations=nothing, backendAddressPool=nothing, provisioningState=nothing)
        o = new()
        validate_property(OutboundNatRulePropertiesFormat, Symbol("allocatedOutboundPorts"), allocatedOutboundPorts)
        setfield!(o, Symbol("allocatedOutboundPorts"), allocatedOutboundPorts)
        validate_property(OutboundNatRulePropertiesFormat, Symbol("frontendIPConfigurations"), frontendIPConfigurations)
        setfield!(o, Symbol("frontendIPConfigurations"), frontendIPConfigurations)
        validate_property(OutboundNatRulePropertiesFormat, Symbol("backendAddressPool"), backendAddressPool)
        setfield!(o, Symbol("backendAddressPool"), backendAddressPool)
        validate_property(OutboundNatRulePropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type OutboundNatRulePropertiesFormat

const _property_map_OutboundNatRulePropertiesFormat = Dict{Symbol,Symbol}(Symbol("allocatedOutboundPorts")=>Symbol("allocatedOutboundPorts"), Symbol("frontendIPConfigurations")=>Symbol("frontendIPConfigurations"), Symbol("backendAddressPool")=>Symbol("backendAddressPool"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_OutboundNatRulePropertiesFormat = Dict{Symbol,String}(Symbol("allocatedOutboundPorts")=>"Int32", Symbol("frontendIPConfigurations")=>"Vector{SubResource}", Symbol("backendAddressPool")=>"SubResource", Symbol("provisioningState")=>"String")
Base.propertynames(::Type{ OutboundNatRulePropertiesFormat }) = collect(keys(_property_map_OutboundNatRulePropertiesFormat))
Swagger.property_type(::Type{ OutboundNatRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_OutboundNatRulePropertiesFormat[name]))}
Swagger.field_name(::Type{ OutboundNatRulePropertiesFormat }, property_name::Symbol) =  _property_map_OutboundNatRulePropertiesFormat[property_name]

function check_required(o::OutboundNatRulePropertiesFormat)
    (getproperty(o, Symbol("backendAddressPool")) === nothing) && (return false)
    true
end

function validate_property(::Type{ OutboundNatRulePropertiesFormat }, name::Symbol, val)
end
