# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct Error <: SwaggerModel
    code::Any # spec type: Union{ Nothing, String } # spec name: code
    message::Any # spec type: Union{ Nothing, String } # spec name: message
    target::Any # spec type: Union{ Nothing, String } # spec name: target
    details::Any # spec type: Union{ Nothing, Vector{ErrorDetails} } # spec name: details
    innerError::Any # spec type: Union{ Nothing, String } # spec name: innerError

    function Error(;code=nothing, message=nothing, target=nothing, details=nothing, innerError=nothing)
        o = new()
        validate_property(Error, Symbol("code"), code)
        setfield!(o, Symbol("code"), code)
        validate_property(Error, Symbol("message"), message)
        setfield!(o, Symbol("message"), message)
        validate_property(Error, Symbol("target"), target)
        setfield!(o, Symbol("target"), target)
        validate_property(Error, Symbol("details"), details)
        setfield!(o, Symbol("details"), details)
        validate_property(Error, Symbol("innerError"), innerError)
        setfield!(o, Symbol("innerError"), innerError)
        o
    end
end # type Error

const _property_map_Error = Dict{Symbol,Symbol}(Symbol("code")=>Symbol("code"), Symbol("message")=>Symbol("message"), Symbol("target")=>Symbol("target"), Symbol("details")=>Symbol("details"), Symbol("innerError")=>Symbol("innerError"))
const _property_types_Error = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("message")=>"String", Symbol("target")=>"String", Symbol("details")=>"Vector{ErrorDetails}", Symbol("innerError")=>"String")
Base.propertynames(::Type{ Error }) = collect(keys(_property_map_Error))
Swagger.property_type(::Type{ Error }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_Error[name]))}
Swagger.field_name(::Type{ Error }, property_name::Symbol) =  _property_map_Error[property_name]

function check_required(o::Error)
    true
end

function validate_property(::Type{ Error }, name::Symbol, val)
end
