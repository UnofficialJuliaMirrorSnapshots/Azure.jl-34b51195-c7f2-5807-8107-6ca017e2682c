# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct SecurityRulePropertiesFormat <: SwaggerModel
    description::Any # spec type: Union{ Nothing, String } # spec name: description
    protocol::Any # spec type: Union{ Nothing, String } # spec name: protocol
    sourcePortRange::Any # spec type: Union{ Nothing, String } # spec name: sourcePortRange
    destinationPortRange::Any # spec type: Union{ Nothing, String } # spec name: destinationPortRange
    sourceAddressPrefix::Any # spec type: Union{ Nothing, String } # spec name: sourceAddressPrefix
    destinationAddressPrefix::Any # spec type: Union{ Nothing, String } # spec name: destinationAddressPrefix
    access::Any # spec type: Union{ Nothing, String } # spec name: access
    priority::Any # spec type: Union{ Nothing, Int32 } # spec name: priority
    direction::Any # spec type: Union{ Nothing, String } # spec name: direction
    provisioningState::Any # spec type: Union{ Nothing, String } # spec name: provisioningState

    function SecurityRulePropertiesFormat(;description=nothing, protocol=nothing, sourcePortRange=nothing, destinationPortRange=nothing, sourceAddressPrefix=nothing, destinationAddressPrefix=nothing, access=nothing, priority=nothing, direction=nothing, provisioningState=nothing)
        o = new()
        validate_property(SecurityRulePropertiesFormat, Symbol("description"), description)
        setfield!(o, Symbol("description"), description)
        validate_property(SecurityRulePropertiesFormat, Symbol("protocol"), protocol)
        setfield!(o, Symbol("protocol"), protocol)
        validate_property(SecurityRulePropertiesFormat, Symbol("sourcePortRange"), sourcePortRange)
        setfield!(o, Symbol("sourcePortRange"), sourcePortRange)
        validate_property(SecurityRulePropertiesFormat, Symbol("destinationPortRange"), destinationPortRange)
        setfield!(o, Symbol("destinationPortRange"), destinationPortRange)
        validate_property(SecurityRulePropertiesFormat, Symbol("sourceAddressPrefix"), sourceAddressPrefix)
        setfield!(o, Symbol("sourceAddressPrefix"), sourceAddressPrefix)
        validate_property(SecurityRulePropertiesFormat, Symbol("destinationAddressPrefix"), destinationAddressPrefix)
        setfield!(o, Symbol("destinationAddressPrefix"), destinationAddressPrefix)
        validate_property(SecurityRulePropertiesFormat, Symbol("access"), access)
        setfield!(o, Symbol("access"), access)
        validate_property(SecurityRulePropertiesFormat, Symbol("priority"), priority)
        setfield!(o, Symbol("priority"), priority)
        validate_property(SecurityRulePropertiesFormat, Symbol("direction"), direction)
        setfield!(o, Symbol("direction"), direction)
        validate_property(SecurityRulePropertiesFormat, Symbol("provisioningState"), provisioningState)
        setfield!(o, Symbol("provisioningState"), provisioningState)
        o
    end
end # type SecurityRulePropertiesFormat

const _property_map_SecurityRulePropertiesFormat = Dict{Symbol,Symbol}(Symbol("description")=>Symbol("description"), Symbol("protocol")=>Symbol("protocol"), Symbol("sourcePortRange")=>Symbol("sourcePortRange"), Symbol("destinationPortRange")=>Symbol("destinationPortRange"), Symbol("sourceAddressPrefix")=>Symbol("sourceAddressPrefix"), Symbol("destinationAddressPrefix")=>Symbol("destinationAddressPrefix"), Symbol("access")=>Symbol("access"), Symbol("priority")=>Symbol("priority"), Symbol("direction")=>Symbol("direction"), Symbol("provisioningState")=>Symbol("provisioningState"))
const _property_types_SecurityRulePropertiesFormat = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("protocol")=>"String", Symbol("sourcePortRange")=>"String", Symbol("destinationPortRange")=>"String", Symbol("sourceAddressPrefix")=>"String", Symbol("destinationAddressPrefix")=>"String", Symbol("access")=>"String", Symbol("priority")=>"Int32", Symbol("direction")=>"String", Symbol("provisioningState")=>"String")
Base.propertynames(::Type{ SecurityRulePropertiesFormat }) = collect(keys(_property_map_SecurityRulePropertiesFormat))
Swagger.property_type(::Type{ SecurityRulePropertiesFormat }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_SecurityRulePropertiesFormat[name]))}
Swagger.field_name(::Type{ SecurityRulePropertiesFormat }, property_name::Symbol) =  _property_map_SecurityRulePropertiesFormat[property_name]

const _allowed_SecurityRulePropertiesFormat_protocol = ["Tcp", "Udp", "*"]

const _allowed_SecurityRulePropertiesFormat_access = ["Allow", "Deny"]

const _allowed_SecurityRulePropertiesFormat_direction = ["Inbound", "Outbound"]

function check_required(o::SecurityRulePropertiesFormat)
    (getproperty(o, Symbol("sourceAddressPrefix")) === nothing) && (return false)
    (getproperty(o, Symbol("destinationAddressPrefix")) === nothing) && (return false)
    true
end

function validate_property(::Type{ SecurityRulePropertiesFormat }, name::Symbol, val)
    if name === Symbol("protocol")
        Swagger.validate_param(name, "SecurityRulePropertiesFormat", :enum, val, _allowed_SecurityRulePropertiesFormat_protocol)
    end
    if name === Symbol("access")
        Swagger.validate_param(name, "SecurityRulePropertiesFormat", :enum, val, _allowed_SecurityRulePropertiesFormat_access)
    end
    if name === Symbol("direction")
        Swagger.validate_param(name, "SecurityRulePropertiesFormat", :enum, val, _allowed_SecurityRulePropertiesFormat_direction)
    end
end
