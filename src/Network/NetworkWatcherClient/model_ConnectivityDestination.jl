# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ConnectivityDestination <: SwaggerModel
    resourceId::Any # spec type: Union{ Nothing, String } # spec name: resourceId
    address::Any # spec type: Union{ Nothing, String } # spec name: address
    port::Any # spec type: Union{ Nothing, Int32 } # spec name: port

    function ConnectivityDestination(;resourceId=nothing, address=nothing, port=nothing)
        o = new()
        validate_property(ConnectivityDestination, Symbol("resourceId"), resourceId)
        setfield!(o, Symbol("resourceId"), resourceId)
        validate_property(ConnectivityDestination, Symbol("address"), address)
        setfield!(o, Symbol("address"), address)
        validate_property(ConnectivityDestination, Symbol("port"), port)
        setfield!(o, Symbol("port"), port)
        o
    end
end # type ConnectivityDestination

const _property_map_ConnectivityDestination = Dict{Symbol,Symbol}(Symbol("resourceId")=>Symbol("resourceId"), Symbol("address")=>Symbol("address"), Symbol("port")=>Symbol("port"))
const _property_types_ConnectivityDestination = Dict{Symbol,String}(Symbol("resourceId")=>"String", Symbol("address")=>"String", Symbol("port")=>"Int32")
Base.propertynames(::Type{ ConnectivityDestination }) = collect(keys(_property_map_ConnectivityDestination))
Swagger.property_type(::Type{ ConnectivityDestination }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ConnectivityDestination[name]))}
Swagger.field_name(::Type{ ConnectivityDestination }, property_name::Symbol) =  _property_map_ConnectivityDestination[property_name]

function check_required(o::ConnectivityDestination)
    true
end

function validate_property(::Type{ ConnectivityDestination }, name::Symbol, val)
end
