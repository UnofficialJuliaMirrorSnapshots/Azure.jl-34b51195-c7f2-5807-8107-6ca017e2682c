# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ConnectivityHop <: SwaggerModel
    type::Any # spec type: Union{ Nothing, String } # spec name: type
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    address::Any # spec type: Union{ Nothing, String } # spec name: address
    resourceId::Any # spec type: Union{ Nothing, String } # spec name: resourceId
    nextHopIds::Any # spec type: Union{ Nothing, Vector{String} } # spec name: nextHopIds
    issues::Any # spec type: Union{ Nothing, Vector{ConnectivityIssue} } # spec name: issues

    function ConnectivityHop(;type=nothing, id=nothing, address=nothing, resourceId=nothing, nextHopIds=nothing, issues=nothing)
        o = new()
        validate_property(ConnectivityHop, Symbol("type"), type)
        setfield!(o, Symbol("type"), type)
        validate_property(ConnectivityHop, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(ConnectivityHop, Symbol("address"), address)
        setfield!(o, Symbol("address"), address)
        validate_property(ConnectivityHop, Symbol("resourceId"), resourceId)
        setfield!(o, Symbol("resourceId"), resourceId)
        validate_property(ConnectivityHop, Symbol("nextHopIds"), nextHopIds)
        setfield!(o, Symbol("nextHopIds"), nextHopIds)
        validate_property(ConnectivityHop, Symbol("issues"), issues)
        setfield!(o, Symbol("issues"), issues)
        o
    end
end # type ConnectivityHop

const _property_map_ConnectivityHop = Dict{Symbol,Symbol}(Symbol("type")=>Symbol("type"), Symbol("id")=>Symbol("id"), Symbol("address")=>Symbol("address"), Symbol("resourceId")=>Symbol("resourceId"), Symbol("nextHopIds")=>Symbol("nextHopIds"), Symbol("issues")=>Symbol("issues"))
const _property_types_ConnectivityHop = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("id")=>"String", Symbol("address")=>"String", Symbol("resourceId")=>"String", Symbol("nextHopIds")=>"Vector{String}", Symbol("issues")=>"Vector{ConnectivityIssue}")
Base.propertynames(::Type{ ConnectivityHop }) = collect(keys(_property_map_ConnectivityHop))
Swagger.property_type(::Type{ ConnectivityHop }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ConnectivityHop[name]))}
Swagger.field_name(::Type{ ConnectivityHop }, property_name::Symbol) =  _property_map_ConnectivityHop[property_name]

function check_required(o::ConnectivityHop)
    true
end

function validate_property(::Type{ ConnectivityHop }, name::Symbol, val)
end
