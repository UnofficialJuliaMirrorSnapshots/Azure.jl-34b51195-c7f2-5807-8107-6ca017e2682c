# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ConnectivityInformation <: SwaggerModel
    hops::Any # spec type: Union{ Nothing, Vector{ConnectivityHop} } # spec name: hops
    connectionStatus::Any # spec type: Union{ Nothing, String } # spec name: connectionStatus
    avgLatencyInMs::Any # spec type: Union{ Nothing, Int32 } # spec name: avgLatencyInMs
    minLatencyInMs::Any # spec type: Union{ Nothing, Int32 } # spec name: minLatencyInMs
    maxLatencyInMs::Any # spec type: Union{ Nothing, Int32 } # spec name: maxLatencyInMs
    probesSent::Any # spec type: Union{ Nothing, Int32 } # spec name: probesSent
    probesFailed::Any # spec type: Union{ Nothing, Int32 } # spec name: probesFailed

    function ConnectivityInformation(;hops=nothing, connectionStatus=nothing, avgLatencyInMs=nothing, minLatencyInMs=nothing, maxLatencyInMs=nothing, probesSent=nothing, probesFailed=nothing)
        o = new()
        validate_property(ConnectivityInformation, Symbol("hops"), hops)
        setfield!(o, Symbol("hops"), hops)
        validate_property(ConnectivityInformation, Symbol("connectionStatus"), connectionStatus)
        setfield!(o, Symbol("connectionStatus"), connectionStatus)
        validate_property(ConnectivityInformation, Symbol("avgLatencyInMs"), avgLatencyInMs)
        setfield!(o, Symbol("avgLatencyInMs"), avgLatencyInMs)
        validate_property(ConnectivityInformation, Symbol("minLatencyInMs"), minLatencyInMs)
        setfield!(o, Symbol("minLatencyInMs"), minLatencyInMs)
        validate_property(ConnectivityInformation, Symbol("maxLatencyInMs"), maxLatencyInMs)
        setfield!(o, Symbol("maxLatencyInMs"), maxLatencyInMs)
        validate_property(ConnectivityInformation, Symbol("probesSent"), probesSent)
        setfield!(o, Symbol("probesSent"), probesSent)
        validate_property(ConnectivityInformation, Symbol("probesFailed"), probesFailed)
        setfield!(o, Symbol("probesFailed"), probesFailed)
        o
    end
end # type ConnectivityInformation

const _property_map_ConnectivityInformation = Dict{Symbol,Symbol}(Symbol("hops")=>Symbol("hops"), Symbol("connectionStatus")=>Symbol("connectionStatus"), Symbol("avgLatencyInMs")=>Symbol("avgLatencyInMs"), Symbol("minLatencyInMs")=>Symbol("minLatencyInMs"), Symbol("maxLatencyInMs")=>Symbol("maxLatencyInMs"), Symbol("probesSent")=>Symbol("probesSent"), Symbol("probesFailed")=>Symbol("probesFailed"))
const _property_types_ConnectivityInformation = Dict{Symbol,String}(Symbol("hops")=>"Vector{ConnectivityHop}", Symbol("connectionStatus")=>"String", Symbol("avgLatencyInMs")=>"Int32", Symbol("minLatencyInMs")=>"Int32", Symbol("maxLatencyInMs")=>"Int32", Symbol("probesSent")=>"Int32", Symbol("probesFailed")=>"Int32")
Base.propertynames(::Type{ ConnectivityInformation }) = collect(keys(_property_map_ConnectivityInformation))
Swagger.property_type(::Type{ ConnectivityInformation }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ConnectivityInformation[name]))}
Swagger.field_name(::Type{ ConnectivityInformation }, property_name::Symbol) =  _property_map_ConnectivityInformation[property_name]

const _allowed_ConnectivityInformation_connectionStatus = ["Unknown", "Connected", "Disconnected", "Degraded"]

function check_required(o::ConnectivityInformation)
    true
end

function validate_property(::Type{ ConnectivityInformation }, name::Symbol, val)
    if name === Symbol("connectionStatus")
        Swagger.validate_param(name, "ConnectivityInformation", :enum, val, _allowed_ConnectivityInformation_connectionStatus)
    end
end
