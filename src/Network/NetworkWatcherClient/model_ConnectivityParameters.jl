# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ConnectivityParameters <: SwaggerModel
    source::Any # spec type: Union{ Nothing, ConnectivitySource } # spec name: source
    destination::Any # spec type: Union{ Nothing, ConnectivityDestination } # spec name: destination

    function ConnectivityParameters(;source=nothing, destination=nothing)
        o = new()
        validate_property(ConnectivityParameters, Symbol("source"), source)
        setfield!(o, Symbol("source"), source)
        validate_property(ConnectivityParameters, Symbol("destination"), destination)
        setfield!(o, Symbol("destination"), destination)
        o
    end
end # type ConnectivityParameters

const _property_map_ConnectivityParameters = Dict{Symbol,Symbol}(Symbol("source")=>Symbol("source"), Symbol("destination")=>Symbol("destination"))
const _property_types_ConnectivityParameters = Dict{Symbol,String}(Symbol("source")=>"ConnectivitySource", Symbol("destination")=>"ConnectivityDestination")
Base.propertynames(::Type{ ConnectivityParameters }) = collect(keys(_property_map_ConnectivityParameters))
Swagger.property_type(::Type{ ConnectivityParameters }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ConnectivityParameters[name]))}
Swagger.field_name(::Type{ ConnectivityParameters }, property_name::Symbol) =  _property_map_ConnectivityParameters[property_name]

function check_required(o::ConnectivityParameters)
    (getproperty(o, Symbol("source")) === nothing) && (return false)
    (getproperty(o, Symbol("destination")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ConnectivityParameters }, name::Symbol, val)
end
