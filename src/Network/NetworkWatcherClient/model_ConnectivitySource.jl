# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ConnectivitySource <: SwaggerModel
    resourceId::Any # spec type: Union{ Nothing, String } # spec name: resourceId
    port::Any # spec type: Union{ Nothing, Int32 } # spec name: port

    function ConnectivitySource(;resourceId=nothing, port=nothing)
        o = new()
        validate_property(ConnectivitySource, Symbol("resourceId"), resourceId)
        setfield!(o, Symbol("resourceId"), resourceId)
        validate_property(ConnectivitySource, Symbol("port"), port)
        setfield!(o, Symbol("port"), port)
        o
    end
end # type ConnectivitySource

const _property_map_ConnectivitySource = Dict{Symbol,Symbol}(Symbol("resourceId")=>Symbol("resourceId"), Symbol("port")=>Symbol("port"))
const _property_types_ConnectivitySource = Dict{Symbol,String}(Symbol("resourceId")=>"String", Symbol("port")=>"Int32")
Base.propertynames(::Type{ ConnectivitySource }) = collect(keys(_property_map_ConnectivitySource))
Swagger.property_type(::Type{ ConnectivitySource }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ConnectivitySource[name]))}
Swagger.field_name(::Type{ ConnectivitySource }, property_name::Symbol) =  _property_map_ConnectivitySource[property_name]

function check_required(o::ConnectivitySource)
    (getproperty(o, Symbol("resourceId")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ConnectivitySource }, name::Symbol, val)
end
