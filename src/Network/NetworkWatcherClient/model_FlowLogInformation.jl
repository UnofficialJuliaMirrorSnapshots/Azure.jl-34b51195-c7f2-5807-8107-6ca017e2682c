# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct FlowLogInformation <: SwaggerModel
    targetResourceId::Any # spec type: Union{ Nothing, String } # spec name: targetResourceId
    properties::Any # spec type: Union{ Nothing, FlowLogProperties } # spec name: properties

    function FlowLogInformation(;targetResourceId=nothing, properties=nothing)
        o = new()
        validate_property(FlowLogInformation, Symbol("targetResourceId"), targetResourceId)
        setfield!(o, Symbol("targetResourceId"), targetResourceId)
        validate_property(FlowLogInformation, Symbol("properties"), properties)
        setfield!(o, Symbol("properties"), properties)
        o
    end
end # type FlowLogInformation

const _property_map_FlowLogInformation = Dict{Symbol,Symbol}(Symbol("targetResourceId")=>Symbol("targetResourceId"), Symbol("properties")=>Symbol("properties"))
const _property_types_FlowLogInformation = Dict{Symbol,String}(Symbol("targetResourceId")=>"String", Symbol("properties")=>"FlowLogProperties")
Base.propertynames(::Type{ FlowLogInformation }) = collect(keys(_property_map_FlowLogInformation))
Swagger.property_type(::Type{ FlowLogInformation }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_FlowLogInformation[name]))}
Swagger.field_name(::Type{ FlowLogInformation }, property_name::Symbol) =  _property_map_FlowLogInformation[property_name]

function check_required(o::FlowLogInformation)
    (getproperty(o, Symbol("targetResourceId")) === nothing) && (return false)
    (getproperty(o, Symbol("properties")) === nothing) && (return false)
    true
end

function validate_property(::Type{ FlowLogInformation }, name::Symbol, val)
end
