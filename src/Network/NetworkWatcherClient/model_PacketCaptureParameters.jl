# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct PacketCaptureParameters <: SwaggerModel
    target::Any # spec type: Union{ Nothing, String } # spec name: target
    bytesToCapturePerPacket::Any # spec type: Union{ Nothing, Int32 } # spec name: bytesToCapturePerPacket
    totalBytesPerSession::Any # spec type: Union{ Nothing, Int32 } # spec name: totalBytesPerSession
    timeLimitInSeconds::Any # spec type: Union{ Nothing, Int32 } # spec name: timeLimitInSeconds
    storageLocation::Any # spec type: Union{ Nothing, PacketCaptureStorageLocation } # spec name: storageLocation
    filters::Any # spec type: Union{ Nothing, Vector{PacketCaptureFilter} } # spec name: filters

    function PacketCaptureParameters(;target=nothing, bytesToCapturePerPacket=nothing, totalBytesPerSession=nothing, timeLimitInSeconds=nothing, storageLocation=nothing, filters=nothing)
        o = new()
        validate_property(PacketCaptureParameters, Symbol("target"), target)
        setfield!(o, Symbol("target"), target)
        validate_property(PacketCaptureParameters, Symbol("bytesToCapturePerPacket"), bytesToCapturePerPacket)
        setfield!(o, Symbol("bytesToCapturePerPacket"), bytesToCapturePerPacket)
        validate_property(PacketCaptureParameters, Symbol("totalBytesPerSession"), totalBytesPerSession)
        setfield!(o, Symbol("totalBytesPerSession"), totalBytesPerSession)
        validate_property(PacketCaptureParameters, Symbol("timeLimitInSeconds"), timeLimitInSeconds)
        setfield!(o, Symbol("timeLimitInSeconds"), timeLimitInSeconds)
        validate_property(PacketCaptureParameters, Symbol("storageLocation"), storageLocation)
        setfield!(o, Symbol("storageLocation"), storageLocation)
        validate_property(PacketCaptureParameters, Symbol("filters"), filters)
        setfield!(o, Symbol("filters"), filters)
        o
    end
end # type PacketCaptureParameters

const _property_map_PacketCaptureParameters = Dict{Symbol,Symbol}(Symbol("target")=>Symbol("target"), Symbol("bytesToCapturePerPacket")=>Symbol("bytesToCapturePerPacket"), Symbol("totalBytesPerSession")=>Symbol("totalBytesPerSession"), Symbol("timeLimitInSeconds")=>Symbol("timeLimitInSeconds"), Symbol("storageLocation")=>Symbol("storageLocation"), Symbol("filters")=>Symbol("filters"))
const _property_types_PacketCaptureParameters = Dict{Symbol,String}(Symbol("target")=>"String", Symbol("bytesToCapturePerPacket")=>"Int32", Symbol("totalBytesPerSession")=>"Int32", Symbol("timeLimitInSeconds")=>"Int32", Symbol("storageLocation")=>"PacketCaptureStorageLocation", Symbol("filters")=>"Vector{PacketCaptureFilter}")
Base.propertynames(::Type{ PacketCaptureParameters }) = collect(keys(_property_map_PacketCaptureParameters))
Swagger.property_type(::Type{ PacketCaptureParameters }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_PacketCaptureParameters[name]))}
Swagger.field_name(::Type{ PacketCaptureParameters }, property_name::Symbol) =  _property_map_PacketCaptureParameters[property_name]

function check_required(o::PacketCaptureParameters)
    (getproperty(o, Symbol("target")) === nothing) && (return false)
    (getproperty(o, Symbol("storageLocation")) === nothing) && (return false)
    true
end

function validate_property(::Type{ PacketCaptureParameters }, name::Symbol, val)
end
