# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct PacketCaptureStorageLocation <: SwaggerModel
    storageId::Any # spec type: Union{ Nothing, String } # spec name: storageId
    storagePath::Any # spec type: Union{ Nothing, String } # spec name: storagePath
    filePath::Any # spec type: Union{ Nothing, String } # spec name: filePath

    function PacketCaptureStorageLocation(;storageId=nothing, storagePath=nothing, filePath=nothing)
        o = new()
        validate_property(PacketCaptureStorageLocation, Symbol("storageId"), storageId)
        setfield!(o, Symbol("storageId"), storageId)
        validate_property(PacketCaptureStorageLocation, Symbol("storagePath"), storagePath)
        setfield!(o, Symbol("storagePath"), storagePath)
        validate_property(PacketCaptureStorageLocation, Symbol("filePath"), filePath)
        setfield!(o, Symbol("filePath"), filePath)
        o
    end
end # type PacketCaptureStorageLocation

const _property_map_PacketCaptureStorageLocation = Dict{Symbol,Symbol}(Symbol("storageId")=>Symbol("storageId"), Symbol("storagePath")=>Symbol("storagePath"), Symbol("filePath")=>Symbol("filePath"))
const _property_types_PacketCaptureStorageLocation = Dict{Symbol,String}(Symbol("storageId")=>"String", Symbol("storagePath")=>"String", Symbol("filePath")=>"String")
Base.propertynames(::Type{ PacketCaptureStorageLocation }) = collect(keys(_property_map_PacketCaptureStorageLocation))
Swagger.property_type(::Type{ PacketCaptureStorageLocation }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_PacketCaptureStorageLocation[name]))}
Swagger.field_name(::Type{ PacketCaptureStorageLocation }, property_name::Symbol) =  _property_map_PacketCaptureStorageLocation[property_name]

function check_required(o::PacketCaptureStorageLocation)
    true
end

function validate_property(::Type{ PacketCaptureStorageLocation }, name::Symbol, val)
end
