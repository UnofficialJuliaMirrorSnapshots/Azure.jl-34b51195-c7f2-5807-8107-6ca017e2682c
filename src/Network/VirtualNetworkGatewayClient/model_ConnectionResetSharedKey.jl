# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct ConnectionResetSharedKey <: SwaggerModel
    keyLength::Any # spec type: Union{ Nothing, Int32 } # spec name: keyLength

    function ConnectionResetSharedKey(;keyLength=nothing)
        o = new()
        validate_property(ConnectionResetSharedKey, Symbol("keyLength"), keyLength)
        setfield!(o, Symbol("keyLength"), keyLength)
        o
    end
end # type ConnectionResetSharedKey

const _property_map_ConnectionResetSharedKey = Dict{Symbol,Symbol}(Symbol("keyLength")=>Symbol("keyLength"))
const _property_types_ConnectionResetSharedKey = Dict{Symbol,String}(Symbol("keyLength")=>"Int32")
Base.propertynames(::Type{ ConnectionResetSharedKey }) = collect(keys(_property_map_ConnectionResetSharedKey))
Swagger.property_type(::Type{ ConnectionResetSharedKey }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_ConnectionResetSharedKey[name]))}
Swagger.field_name(::Type{ ConnectionResetSharedKey }, property_name::Symbol) =  _property_map_ConnectionResetSharedKey[property_name]

function check_required(o::ConnectionResetSharedKey)
    (getproperty(o, Symbol("keyLength")) === nothing) && (return false)
    true
end

function validate_property(::Type{ ConnectionResetSharedKey }, name::Symbol, val)
    if name === Symbol("keyLength")
        Swagger.validate_param(name, "ConnectionResetSharedKey", :maximum, val, 128, false)
        Swagger.validate_param(name, "ConnectionResetSharedKey", :minimum, val, 1, false)
    end
end
