# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct VpnClientParameters <: SwaggerModel
    processorArchitecture::Any # spec type: Union{ Nothing, String } # spec name: processorArchitecture

    function VpnClientParameters(;processorArchitecture=nothing)
        o = new()
        validate_property(VpnClientParameters, Symbol("processorArchitecture"), processorArchitecture)
        setfield!(o, Symbol("processorArchitecture"), processorArchitecture)
        o
    end
end # type VpnClientParameters

const _property_map_VpnClientParameters = Dict{Symbol,Symbol}(Symbol("processorArchitecture")=>Symbol("processorArchitecture"))
const _property_types_VpnClientParameters = Dict{Symbol,String}(Symbol("processorArchitecture")=>"String")
Base.propertynames(::Type{ VpnClientParameters }) = collect(keys(_property_map_VpnClientParameters))
Swagger.property_type(::Type{ VpnClientParameters }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_VpnClientParameters[name]))}
Swagger.field_name(::Type{ VpnClientParameters }, property_name::Symbol) =  _property_map_VpnClientParameters[property_name]

const _allowed_VpnClientParameters_processorArchitecture = ["Amd64", "X86"]

function check_required(o::VpnClientParameters)
    true
end

function validate_property(::Type{ VpnClientParameters }, name::Symbol, val)
    if name === Symbol("processorArchitecture")
        Swagger.validate_param(name, "VpnClientParameters", :enum, val, _allowed_VpnClientParameters_processorArchitecture)
    end
end
