# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct PolicyAssignmentProperties <: SwaggerModel
    displayName::Any # spec type: Union{ Nothing, String } # spec name: displayName
    policyDefinitionId::Any # spec type: Union{ Nothing, String } # spec name: policyDefinitionId
    scope::Any # spec type: Union{ Nothing, String } # spec name: scope

    function PolicyAssignmentProperties(;displayName=nothing, policyDefinitionId=nothing, scope=nothing)
        o = new()
        validate_property(PolicyAssignmentProperties, Symbol("displayName"), displayName)
        setfield!(o, Symbol("displayName"), displayName)
        validate_property(PolicyAssignmentProperties, Symbol("policyDefinitionId"), policyDefinitionId)
        setfield!(o, Symbol("policyDefinitionId"), policyDefinitionId)
        validate_property(PolicyAssignmentProperties, Symbol("scope"), scope)
        setfield!(o, Symbol("scope"), scope)
        o
    end
end # type PolicyAssignmentProperties

const _property_map_PolicyAssignmentProperties = Dict{Symbol,Symbol}(Symbol("displayName")=>Symbol("displayName"), Symbol("policyDefinitionId")=>Symbol("policyDefinitionId"), Symbol("scope")=>Symbol("scope"))
const _property_types_PolicyAssignmentProperties = Dict{Symbol,String}(Symbol("displayName")=>"String", Symbol("policyDefinitionId")=>"String", Symbol("scope")=>"String")
Base.propertynames(::Type{ PolicyAssignmentProperties }) = collect(keys(_property_map_PolicyAssignmentProperties))
Swagger.property_type(::Type{ PolicyAssignmentProperties }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_PolicyAssignmentProperties[name]))}
Swagger.field_name(::Type{ PolicyAssignmentProperties }, property_name::Symbol) =  _property_map_PolicyAssignmentProperties[property_name]

function check_required(o::PolicyAssignmentProperties)
    true
end

function validate_property(::Type{ PolicyAssignmentProperties }, name::Symbol, val)
end
