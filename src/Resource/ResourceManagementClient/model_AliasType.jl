# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct AliasType <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    paths::Any # spec type: Union{ Nothing, Vector{AliasPathType} } # spec name: paths

    function AliasType(;name=nothing, paths=nothing)
        o = new()
        validate_property(AliasType, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(AliasType, Symbol("paths"), paths)
        setfield!(o, Symbol("paths"), paths)
        o
    end
end # type AliasType

const _property_map_AliasType = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("paths")=>Symbol("paths"))
const _property_types_AliasType = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("paths")=>"Vector{AliasPathType}")
Base.propertynames(::Type{ AliasType }) = collect(keys(_property_map_AliasType))
Swagger.property_type(::Type{ AliasType }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_AliasType[name]))}
Swagger.field_name(::Type{ AliasType }, property_name::Symbol) =  _property_map_AliasType[property_name]

function check_required(o::AliasType)
    true
end

function validate_property(::Type{ AliasType }, name::Symbol, val)
end
