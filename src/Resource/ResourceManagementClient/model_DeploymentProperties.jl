# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct DeploymentProperties <: SwaggerModel
    template::Any # spec type: Union{ Nothing, Any } # spec name: template
    templateLink::Any # spec type: Union{ Nothing, TemplateLink } # spec name: templateLink
    parameters::Any # spec type: Union{ Nothing, Any } # spec name: parameters
    parametersLink::Any # spec type: Union{ Nothing, ParametersLink } # spec name: parametersLink
    mode::Any # spec type: Union{ Nothing, String } # spec name: mode
    debugSetting::Any # spec type: Union{ Nothing, DebugSetting } # spec name: debugSetting

    function DeploymentProperties(;template=nothing, templateLink=nothing, parameters=nothing, parametersLink=nothing, mode=nothing, debugSetting=nothing)
        o = new()
        validate_property(DeploymentProperties, Symbol("template"), template)
        setfield!(o, Symbol("template"), template)
        validate_property(DeploymentProperties, Symbol("templateLink"), templateLink)
        setfield!(o, Symbol("templateLink"), templateLink)
        validate_property(DeploymentProperties, Symbol("parameters"), parameters)
        setfield!(o, Symbol("parameters"), parameters)
        validate_property(DeploymentProperties, Symbol("parametersLink"), parametersLink)
        setfield!(o, Symbol("parametersLink"), parametersLink)
        validate_property(DeploymentProperties, Symbol("mode"), mode)
        setfield!(o, Symbol("mode"), mode)
        validate_property(DeploymentProperties, Symbol("debugSetting"), debugSetting)
        setfield!(o, Symbol("debugSetting"), debugSetting)
        o
    end
end # type DeploymentProperties

const _property_map_DeploymentProperties = Dict{Symbol,Symbol}(Symbol("template")=>Symbol("template"), Symbol("templateLink")=>Symbol("templateLink"), Symbol("parameters")=>Symbol("parameters"), Symbol("parametersLink")=>Symbol("parametersLink"), Symbol("mode")=>Symbol("mode"), Symbol("debugSetting")=>Symbol("debugSetting"))
const _property_types_DeploymentProperties = Dict{Symbol,String}(Symbol("template")=>"Any", Symbol("templateLink")=>"TemplateLink", Symbol("parameters")=>"Any", Symbol("parametersLink")=>"ParametersLink", Symbol("mode")=>"String", Symbol("debugSetting")=>"DebugSetting")
Base.propertynames(::Type{ DeploymentProperties }) = collect(keys(_property_map_DeploymentProperties))
Swagger.property_type(::Type{ DeploymentProperties }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_DeploymentProperties[name]))}
Swagger.field_name(::Type{ DeploymentProperties }, property_name::Symbol) =  _property_map_DeploymentProperties[property_name]

const _allowed_DeploymentProperties_mode = ["Incremental", "Complete"]

function check_required(o::DeploymentProperties)
    true
end

function validate_property(::Type{ DeploymentProperties }, name::Symbol, val)
    if name === Symbol("mode")
        Swagger.validate_param(name, "DeploymentProperties", :enum, val, _allowed_DeploymentProperties_mode)
    end
end
