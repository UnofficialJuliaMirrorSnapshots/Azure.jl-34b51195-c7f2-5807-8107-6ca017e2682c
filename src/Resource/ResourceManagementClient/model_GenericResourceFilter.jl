# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct GenericResourceFilter <: SwaggerModel
    resourceType::Any # spec type: Union{ Nothing, String } # spec name: resourceType
    tagname::Any # spec type: Union{ Nothing, String } # spec name: tagname
    tagvalue::Any # spec type: Union{ Nothing, String } # spec name: tagvalue

    function GenericResourceFilter(;resourceType=nothing, tagname=nothing, tagvalue=nothing)
        o = new()
        validate_property(GenericResourceFilter, Symbol("resourceType"), resourceType)
        setfield!(o, Symbol("resourceType"), resourceType)
        validate_property(GenericResourceFilter, Symbol("tagname"), tagname)
        setfield!(o, Symbol("tagname"), tagname)
        validate_property(GenericResourceFilter, Symbol("tagvalue"), tagvalue)
        setfield!(o, Symbol("tagvalue"), tagvalue)
        o
    end
end # type GenericResourceFilter

const _property_map_GenericResourceFilter = Dict{Symbol,Symbol}(Symbol("resourceType")=>Symbol("resourceType"), Symbol("tagname")=>Symbol("tagname"), Symbol("tagvalue")=>Symbol("tagvalue"))
const _property_types_GenericResourceFilter = Dict{Symbol,String}(Symbol("resourceType")=>"String", Symbol("tagname")=>"String", Symbol("tagvalue")=>"String")
Base.propertynames(::Type{ GenericResourceFilter }) = collect(keys(_property_map_GenericResourceFilter))
Swagger.property_type(::Type{ GenericResourceFilter }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_GenericResourceFilter[name]))}
Swagger.field_name(::Type{ GenericResourceFilter }, property_name::Symbol) =  _property_map_GenericResourceFilter[property_name]

function check_required(o::GenericResourceFilter)
    true
end

function validate_property(::Type{ GenericResourceFilter }, name::Symbol, val)
end
