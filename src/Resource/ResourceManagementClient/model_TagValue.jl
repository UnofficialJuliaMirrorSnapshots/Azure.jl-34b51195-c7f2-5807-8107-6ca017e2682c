# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct TagValue <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    tagValue::Any # spec type: Union{ Nothing, String } # spec name: tagValue
    count::Any # spec type: Union{ Nothing, TagCount } # spec name: count

    function TagValue(;id=nothing, tagValue=nothing, count=nothing)
        o = new()
        validate_property(TagValue, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(TagValue, Symbol("tagValue"), tagValue)
        setfield!(o, Symbol("tagValue"), tagValue)
        validate_property(TagValue, Symbol("count"), count)
        setfield!(o, Symbol("count"), count)
        o
    end
end # type TagValue

const _property_map_TagValue = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("tagValue")=>Symbol("tagValue"), Symbol("count")=>Symbol("count"))
const _property_types_TagValue = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("tagValue")=>"String", Symbol("count")=>"TagCount")
Base.propertynames(::Type{ TagValue }) = collect(keys(_property_map_TagValue))
Swagger.property_type(::Type{ TagValue }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_TagValue[name]))}
Swagger.field_name(::Type{ TagValue }, property_name::Symbol) =  _property_map_TagValue[property_name]

function check_required(o::TagValue)
    true
end

function validate_property(::Type{ TagValue }, name::Symbol, val)
end
