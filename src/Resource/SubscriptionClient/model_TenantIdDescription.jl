# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct TenantIdDescription <: SwaggerModel
    id::Any # spec type: Union{ Nothing, String } # spec name: id
    tenantId::Any # spec type: Union{ Nothing, String } # spec name: tenantId

    function TenantIdDescription(;id=nothing, tenantId=nothing)
        o = new()
        validate_property(TenantIdDescription, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(TenantIdDescription, Symbol("tenantId"), tenantId)
        setfield!(o, Symbol("tenantId"), tenantId)
        o
    end
end # type TenantIdDescription

const _property_map_TenantIdDescription = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("tenantId")=>Symbol("tenantId"))
const _property_types_TenantIdDescription = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("tenantId")=>"String")
Base.propertynames(::Type{ TenantIdDescription }) = collect(keys(_property_map_TenantIdDescription))
Swagger.property_type(::Type{ TenantIdDescription }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_TenantIdDescription[name]))}
Swagger.field_name(::Type{ TenantIdDescription }, property_name::Symbol) =  _property_map_TenantIdDescription[property_name]

function check_required(o::TenantIdDescription)
    true
end

function validate_property(::Type{ TenantIdDescription }, name::Symbol, val)
end
