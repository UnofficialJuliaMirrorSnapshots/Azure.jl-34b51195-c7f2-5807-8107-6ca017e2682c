# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct AccountSasParameters <: SwaggerModel
    signedServices::Any # spec type: Union{ Nothing, String } # spec name: signedServices
    signedResourceTypes::Any # spec type: Union{ Nothing, String } # spec name: signedResourceTypes
    signedPermission::Any # spec type: Union{ Nothing, String } # spec name: signedPermission
    signedIp::Any # spec type: Union{ Nothing, String } # spec name: signedIp
    signedProtocol::Any # spec type: Union{ Nothing, String } # spec name: signedProtocol
    signedStart::Any # spec type: Union{ Nothing, DateTime } # spec name: signedStart
    signedExpiry::Any # spec type: Union{ Nothing, DateTime } # spec name: signedExpiry
    keyToSign::Any # spec type: Union{ Nothing, String } # spec name: keyToSign

    function AccountSasParameters(;signedServices=nothing, signedResourceTypes=nothing, signedPermission=nothing, signedIp=nothing, signedProtocol=nothing, signedStart=nothing, signedExpiry=nothing, keyToSign=nothing)
        o = new()
        validate_property(AccountSasParameters, Symbol("signedServices"), signedServices)
        setfield!(o, Symbol("signedServices"), signedServices)
        validate_property(AccountSasParameters, Symbol("signedResourceTypes"), signedResourceTypes)
        setfield!(o, Symbol("signedResourceTypes"), signedResourceTypes)
        validate_property(AccountSasParameters, Symbol("signedPermission"), signedPermission)
        setfield!(o, Symbol("signedPermission"), signedPermission)
        validate_property(AccountSasParameters, Symbol("signedIp"), signedIp)
        setfield!(o, Symbol("signedIp"), signedIp)
        validate_property(AccountSasParameters, Symbol("signedProtocol"), signedProtocol)
        setfield!(o, Symbol("signedProtocol"), signedProtocol)
        validate_property(AccountSasParameters, Symbol("signedStart"), signedStart)
        setfield!(o, Symbol("signedStart"), signedStart)
        validate_property(AccountSasParameters, Symbol("signedExpiry"), signedExpiry)
        setfield!(o, Symbol("signedExpiry"), signedExpiry)
        validate_property(AccountSasParameters, Symbol("keyToSign"), keyToSign)
        setfield!(o, Symbol("keyToSign"), keyToSign)
        o
    end
end # type AccountSasParameters

const _property_map_AccountSasParameters = Dict{Symbol,Symbol}(Symbol("signedServices")=>Symbol("signedServices"), Symbol("signedResourceTypes")=>Symbol("signedResourceTypes"), Symbol("signedPermission")=>Symbol("signedPermission"), Symbol("signedIp")=>Symbol("signedIp"), Symbol("signedProtocol")=>Symbol("signedProtocol"), Symbol("signedStart")=>Symbol("signedStart"), Symbol("signedExpiry")=>Symbol("signedExpiry"), Symbol("keyToSign")=>Symbol("keyToSign"))
const _property_types_AccountSasParameters = Dict{Symbol,String}(Symbol("signedServices")=>"String", Symbol("signedResourceTypes")=>"String", Symbol("signedPermission")=>"String", Symbol("signedIp")=>"String", Symbol("signedProtocol")=>"String", Symbol("signedStart")=>"DateTime", Symbol("signedExpiry")=>"DateTime", Symbol("keyToSign")=>"String")
Base.propertynames(::Type{ AccountSasParameters }) = collect(keys(_property_map_AccountSasParameters))
Swagger.property_type(::Type{ AccountSasParameters }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_AccountSasParameters[name]))}
Swagger.field_name(::Type{ AccountSasParameters }, property_name::Symbol) =  _property_map_AccountSasParameters[property_name]

const _allowed_AccountSasParameters_signedServices = ["b", "q", "t", "f"]

const _allowed_AccountSasParameters_signedResourceTypes = ["s", "c", "o"]

const _allowed_AccountSasParameters_signedPermission = ["r", "d", "w", "l", "a", "c", "u", "p"]

const _allowed_AccountSasParameters_signedProtocol = ["https,http", "https"]

function check_required(o::AccountSasParameters)
    (getproperty(o, Symbol("signedExpiry")) === nothing) && (return false)
    true
end

function validate_property(::Type{ AccountSasParameters }, name::Symbol, val)
    if name === Symbol("signedServices")
        Swagger.validate_param(name, "AccountSasParameters", :enum, val, _allowed_AccountSasParameters_signedServices)
    end
    if name === Symbol("signedResourceTypes")
        Swagger.validate_param(name, "AccountSasParameters", :enum, val, _allowed_AccountSasParameters_signedResourceTypes)
    end
    if name === Symbol("signedPermission")
        Swagger.validate_param(name, "AccountSasParameters", :enum, val, _allowed_AccountSasParameters_signedPermission)
    end
    if name === Symbol("signedProtocol")
        Swagger.validate_param(name, "AccountSasParameters", :enum, val, _allowed_AccountSasParameters_signedProtocol)
    end
end
