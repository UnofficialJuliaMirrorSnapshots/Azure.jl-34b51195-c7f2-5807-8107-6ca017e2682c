# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct Dimension <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    displayName::Any # spec type: Union{ Nothing, String } # spec name: displayName

    function Dimension(;name=nothing, displayName=nothing)
        o = new()
        validate_property(Dimension, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(Dimension, Symbol("displayName"), displayName)
        setfield!(o, Symbol("displayName"), displayName)
        o
    end
end # type Dimension

const _property_map_Dimension = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("displayName")=>Symbol("displayName"))
const _property_types_Dimension = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("displayName")=>"String")
Base.propertynames(::Type{ Dimension }) = collect(keys(_property_map_Dimension))
Swagger.property_type(::Type{ Dimension }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_Dimension[name]))}
Swagger.field_name(::Type{ Dimension }, property_name::Symbol) =  _property_map_Dimension[property_name]

function check_required(o::Dimension)
    true
end

function validate_property(::Type{ Dimension }, name::Symbol, val)
end
