# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct EncryptionService <: SwaggerModel
    enabled::Any # spec type: Union{ Nothing, Bool } # spec name: enabled
    lastEnabledTime::Any # spec type: Union{ Nothing, DateTime } # spec name: lastEnabledTime

    function EncryptionService(;enabled=nothing, lastEnabledTime=nothing)
        o = new()
        validate_property(EncryptionService, Symbol("enabled"), enabled)
        setfield!(o, Symbol("enabled"), enabled)
        validate_property(EncryptionService, Symbol("lastEnabledTime"), lastEnabledTime)
        setfield!(o, Symbol("lastEnabledTime"), lastEnabledTime)
        o
    end
end # type EncryptionService

const _property_map_EncryptionService = Dict{Symbol,Symbol}(Symbol("enabled")=>Symbol("enabled"), Symbol("lastEnabledTime")=>Symbol("lastEnabledTime"))
const _property_types_EncryptionService = Dict{Symbol,String}(Symbol("enabled")=>"Bool", Symbol("lastEnabledTime")=>"DateTime")
Base.propertynames(::Type{ EncryptionService }) = collect(keys(_property_map_EncryptionService))
Swagger.property_type(::Type{ EncryptionService }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_EncryptionService[name]))}
Swagger.field_name(::Type{ EncryptionService }, property_name::Symbol) =  _property_map_EncryptionService[property_name]

function check_required(o::EncryptionService)
    true
end

function validate_property(::Type{ EncryptionService }, name::Symbol, val)
end
