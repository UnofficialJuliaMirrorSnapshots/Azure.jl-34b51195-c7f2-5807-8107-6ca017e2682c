# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct Endpoints <: SwaggerModel
    blob::Any # spec type: Union{ Nothing, String } # spec name: blob
    queue::Any # spec type: Union{ Nothing, String } # spec name: queue
    table::Any # spec type: Union{ Nothing, String } # spec name: table
    file::Any # spec type: Union{ Nothing, String } # spec name: file

    function Endpoints(;blob=nothing, queue=nothing, table=nothing, file=nothing)
        o = new()
        validate_property(Endpoints, Symbol("blob"), blob)
        setfield!(o, Symbol("blob"), blob)
        validate_property(Endpoints, Symbol("queue"), queue)
        setfield!(o, Symbol("queue"), queue)
        validate_property(Endpoints, Symbol("table"), table)
        setfield!(o, Symbol("table"), table)
        validate_property(Endpoints, Symbol("file"), file)
        setfield!(o, Symbol("file"), file)
        o
    end
end # type Endpoints

const _property_map_Endpoints = Dict{Symbol,Symbol}(Symbol("blob")=>Symbol("blob"), Symbol("queue")=>Symbol("queue"), Symbol("table")=>Symbol("table"), Symbol("file")=>Symbol("file"))
const _property_types_Endpoints = Dict{Symbol,String}(Symbol("blob")=>"String", Symbol("queue")=>"String", Symbol("table")=>"String", Symbol("file")=>"String")
Base.propertynames(::Type{ Endpoints }) = collect(keys(_property_map_Endpoints))
Swagger.property_type(::Type{ Endpoints }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_Endpoints[name]))}
Swagger.field_name(::Type{ Endpoints }, property_name::Symbol) =  _property_map_Endpoints[property_name]

function check_required(o::Endpoints)
    true
end

function validate_property(::Type{ Endpoints }, name::Symbol, val)
end
