# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct IPRule <: SwaggerModel
    value::Any # spec type: Union{ Nothing, String } # spec name: value
    action::Any # spec type: Union{ Nothing, String } # spec name: action

    function IPRule(;value=nothing, action="Allow")
        o = new()
        validate_property(IPRule, Symbol("value"), value)
        setfield!(o, Symbol("value"), value)
        validate_property(IPRule, Symbol("action"), action)
        setfield!(o, Symbol("action"), action)
        o
    end
end # type IPRule

const _property_map_IPRule = Dict{Symbol,Symbol}(Symbol("value")=>Symbol("value"), Symbol("action")=>Symbol("action"))
const _property_types_IPRule = Dict{Symbol,String}(Symbol("value")=>"String", Symbol("action")=>"String")
Base.propertynames(::Type{ IPRule }) = collect(keys(_property_map_IPRule))
Swagger.property_type(::Type{ IPRule }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_IPRule[name]))}
Swagger.field_name(::Type{ IPRule }, property_name::Symbol) =  _property_map_IPRule[property_name]

const _allowed_IPRule_action = ["Allow"]

function check_required(o::IPRule)
    (getproperty(o, Symbol("value")) === nothing) && (return false)
    true
end

function validate_property(::Type{ IPRule }, name::Symbol, val)
    if name === Symbol("action")
        Swagger.validate_param(name, "IPRule", :enum, val, _allowed_IPRule_action)
    end
end
