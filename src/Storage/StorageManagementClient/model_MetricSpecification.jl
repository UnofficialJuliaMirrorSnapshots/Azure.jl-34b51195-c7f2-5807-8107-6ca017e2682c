# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct MetricSpecification <: SwaggerModel
    name::Any # spec type: Union{ Nothing, String } # spec name: name
    displayName::Any # spec type: Union{ Nothing, String } # spec name: displayName
    displayDescription::Any # spec type: Union{ Nothing, String } # spec name: displayDescription
    unit::Any # spec type: Union{ Nothing, String } # spec name: unit
    dimensions::Any # spec type: Union{ Nothing, Vector{Dimension} } # spec name: dimensions
    aggregationType::Any # spec type: Union{ Nothing, String } # spec name: aggregationType
    fillGapWithZero::Any # spec type: Union{ Nothing, Bool } # spec name: fillGapWithZero
    category::Any # spec type: Union{ Nothing, String } # spec name: category
    resourceIdDimensionNameOverride::Any # spec type: Union{ Nothing, String } # spec name: resourceIdDimensionNameOverride

    function MetricSpecification(;name=nothing, displayName=nothing, displayDescription=nothing, unit=nothing, dimensions=nothing, aggregationType=nothing, fillGapWithZero=nothing, category=nothing, resourceIdDimensionNameOverride=nothing)
        o = new()
        validate_property(MetricSpecification, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        validate_property(MetricSpecification, Symbol("displayName"), displayName)
        setfield!(o, Symbol("displayName"), displayName)
        validate_property(MetricSpecification, Symbol("displayDescription"), displayDescription)
        setfield!(o, Symbol("displayDescription"), displayDescription)
        validate_property(MetricSpecification, Symbol("unit"), unit)
        setfield!(o, Symbol("unit"), unit)
        validate_property(MetricSpecification, Symbol("dimensions"), dimensions)
        setfield!(o, Symbol("dimensions"), dimensions)
        validate_property(MetricSpecification, Symbol("aggregationType"), aggregationType)
        setfield!(o, Symbol("aggregationType"), aggregationType)
        validate_property(MetricSpecification, Symbol("fillGapWithZero"), fillGapWithZero)
        setfield!(o, Symbol("fillGapWithZero"), fillGapWithZero)
        validate_property(MetricSpecification, Symbol("category"), category)
        setfield!(o, Symbol("category"), category)
        validate_property(MetricSpecification, Symbol("resourceIdDimensionNameOverride"), resourceIdDimensionNameOverride)
        setfield!(o, Symbol("resourceIdDimensionNameOverride"), resourceIdDimensionNameOverride)
        o
    end
end # type MetricSpecification

const _property_map_MetricSpecification = Dict{Symbol,Symbol}(Symbol("name")=>Symbol("name"), Symbol("displayName")=>Symbol("displayName"), Symbol("displayDescription")=>Symbol("displayDescription"), Symbol("unit")=>Symbol("unit"), Symbol("dimensions")=>Symbol("dimensions"), Symbol("aggregationType")=>Symbol("aggregationType"), Symbol("fillGapWithZero")=>Symbol("fillGapWithZero"), Symbol("category")=>Symbol("category"), Symbol("resourceIdDimensionNameOverride")=>Symbol("resourceIdDimensionNameOverride"))
const _property_types_MetricSpecification = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("displayName")=>"String", Symbol("displayDescription")=>"String", Symbol("unit")=>"String", Symbol("dimensions")=>"Vector{Dimension}", Symbol("aggregationType")=>"String", Symbol("fillGapWithZero")=>"Bool", Symbol("category")=>"String", Symbol("resourceIdDimensionNameOverride")=>"String")
Base.propertynames(::Type{ MetricSpecification }) = collect(keys(_property_map_MetricSpecification))
Swagger.property_type(::Type{ MetricSpecification }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_MetricSpecification[name]))}
Swagger.field_name(::Type{ MetricSpecification }, property_name::Symbol) =  _property_map_MetricSpecification[property_name]

function check_required(o::MetricSpecification)
    true
end

function validate_property(::Type{ MetricSpecification }, name::Symbol, val)
end
