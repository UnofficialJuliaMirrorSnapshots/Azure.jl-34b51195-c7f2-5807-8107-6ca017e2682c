# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct NetworkRuleSet <: SwaggerModel
    bypass::Any # spec type: Union{ Nothing, String } # spec name: bypass
    virtualNetworkRules::Any # spec type: Union{ Nothing, Vector{VirtualNetworkRule} } # spec name: virtualNetworkRules
    ipRules::Any # spec type: Union{ Nothing, Vector{IPRule} } # spec name: ipRules
    defaultAction::Any # spec type: Union{ Nothing, String } # spec name: defaultAction

    function NetworkRuleSet(;bypass="AzureServices", virtualNetworkRules=nothing, ipRules=nothing, defaultAction="Allow")
        o = new()
        validate_property(NetworkRuleSet, Symbol("bypass"), bypass)
        setfield!(o, Symbol("bypass"), bypass)
        validate_property(NetworkRuleSet, Symbol("virtualNetworkRules"), virtualNetworkRules)
        setfield!(o, Symbol("virtualNetworkRules"), virtualNetworkRules)
        validate_property(NetworkRuleSet, Symbol("ipRules"), ipRules)
        setfield!(o, Symbol("ipRules"), ipRules)
        validate_property(NetworkRuleSet, Symbol("defaultAction"), defaultAction)
        setfield!(o, Symbol("defaultAction"), defaultAction)
        o
    end
end # type NetworkRuleSet

const _property_map_NetworkRuleSet = Dict{Symbol,Symbol}(Symbol("bypass")=>Symbol("bypass"), Symbol("virtualNetworkRules")=>Symbol("virtualNetworkRules"), Symbol("ipRules")=>Symbol("ipRules"), Symbol("defaultAction")=>Symbol("defaultAction"))
const _property_types_NetworkRuleSet = Dict{Symbol,String}(Symbol("bypass")=>"String", Symbol("virtualNetworkRules")=>"Vector{VirtualNetworkRule}", Symbol("ipRules")=>"Vector{IPRule}", Symbol("defaultAction")=>"String")
Base.propertynames(::Type{ NetworkRuleSet }) = collect(keys(_property_map_NetworkRuleSet))
Swagger.property_type(::Type{ NetworkRuleSet }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_NetworkRuleSet[name]))}
Swagger.field_name(::Type{ NetworkRuleSet }, property_name::Symbol) =  _property_map_NetworkRuleSet[property_name]

const _allowed_NetworkRuleSet_bypass = ["None", "Logging", "Metrics", "AzureServices"]

const _allowed_NetworkRuleSet_defaultAction = ["Allow", "Deny"]

function check_required(o::NetworkRuleSet)
    true
end

function validate_property(::Type{ NetworkRuleSet }, name::Symbol, val)
    if name === Symbol("bypass")
        Swagger.validate_param(name, "NetworkRuleSet", :enum, val, _allowed_NetworkRuleSet_bypass)
    end
    if name === Symbol("defaultAction")
        Swagger.validate_param(name, "NetworkRuleSet", :enum, val, _allowed_NetworkRuleSet_defaultAction)
    end
end
