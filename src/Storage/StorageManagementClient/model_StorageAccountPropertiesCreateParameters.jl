# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct StorageAccountPropertiesCreateParameters <: SwaggerModel
    customDomain::Any # spec type: Union{ Nothing, CustomDomain } # spec name: customDomain
    encryption::Any # spec type: Union{ Nothing, Encryption } # spec name: encryption
    networkAcls::Any # spec type: Union{ Nothing, NetworkRuleSet } # spec name: networkAcls
    accessTier::Any # spec type: Union{ Nothing, String } # spec name: accessTier
    supportsHttpsTrafficOnly::Any # spec type: Union{ Nothing, Bool } # spec name: supportsHttpsTrafficOnly

    function StorageAccountPropertiesCreateParameters(;customDomain=nothing, encryption=nothing, networkAcls=nothing, accessTier=nothing, supportsHttpsTrafficOnly=false)
        o = new()
        validate_property(StorageAccountPropertiesCreateParameters, Symbol("customDomain"), customDomain)
        setfield!(o, Symbol("customDomain"), customDomain)
        validate_property(StorageAccountPropertiesCreateParameters, Symbol("encryption"), encryption)
        setfield!(o, Symbol("encryption"), encryption)
        validate_property(StorageAccountPropertiesCreateParameters, Symbol("networkAcls"), networkAcls)
        setfield!(o, Symbol("networkAcls"), networkAcls)
        validate_property(StorageAccountPropertiesCreateParameters, Symbol("accessTier"), accessTier)
        setfield!(o, Symbol("accessTier"), accessTier)
        validate_property(StorageAccountPropertiesCreateParameters, Symbol("supportsHttpsTrafficOnly"), supportsHttpsTrafficOnly)
        setfield!(o, Symbol("supportsHttpsTrafficOnly"), supportsHttpsTrafficOnly)
        o
    end
end # type StorageAccountPropertiesCreateParameters

const _property_map_StorageAccountPropertiesCreateParameters = Dict{Symbol,Symbol}(Symbol("customDomain")=>Symbol("customDomain"), Symbol("encryption")=>Symbol("encryption"), Symbol("networkAcls")=>Symbol("networkAcls"), Symbol("accessTier")=>Symbol("accessTier"), Symbol("supportsHttpsTrafficOnly")=>Symbol("supportsHttpsTrafficOnly"))
const _property_types_StorageAccountPropertiesCreateParameters = Dict{Symbol,String}(Symbol("customDomain")=>"CustomDomain", Symbol("encryption")=>"Encryption", Symbol("networkAcls")=>"NetworkRuleSet", Symbol("accessTier")=>"String", Symbol("supportsHttpsTrafficOnly")=>"Bool")
Base.propertynames(::Type{ StorageAccountPropertiesCreateParameters }) = collect(keys(_property_map_StorageAccountPropertiesCreateParameters))
Swagger.property_type(::Type{ StorageAccountPropertiesCreateParameters }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_StorageAccountPropertiesCreateParameters[name]))}
Swagger.field_name(::Type{ StorageAccountPropertiesCreateParameters }, property_name::Symbol) =  _property_map_StorageAccountPropertiesCreateParameters[property_name]

const _allowed_StorageAccountPropertiesCreateParameters_accessTier = ["Hot", "Cool"]

function check_required(o::StorageAccountPropertiesCreateParameters)
    true
end

function validate_property(::Type{ StorageAccountPropertiesCreateParameters }, name::Symbol, val)
    if name === Symbol("accessTier")
        Swagger.validate_param(name, "StorageAccountPropertiesCreateParameters", :enum, val, _allowed_StorageAccountPropertiesCreateParameters_accessTier)
    end
end
