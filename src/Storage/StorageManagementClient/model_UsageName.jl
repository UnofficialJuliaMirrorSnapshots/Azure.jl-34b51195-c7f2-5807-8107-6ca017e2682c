# This file was generated by the Julia Swagger Code Generator
# Do not modify this file directly. Modify the swagger specification instead.



mutable struct UsageName <: SwaggerModel
    value::Any # spec type: Union{ Nothing, String } # spec name: value
    localizedValue::Any # spec type: Union{ Nothing, String } # spec name: localizedValue

    function UsageName(;value=nothing, localizedValue=nothing)
        o = new()
        validate_property(UsageName, Symbol("value"), value)
        setfield!(o, Symbol("value"), value)
        validate_property(UsageName, Symbol("localizedValue"), localizedValue)
        setfield!(o, Symbol("localizedValue"), localizedValue)
        o
    end
end # type UsageName

const _property_map_UsageName = Dict{Symbol,Symbol}(Symbol("value")=>Symbol("value"), Symbol("localizedValue")=>Symbol("localizedValue"))
const _property_types_UsageName = Dict{Symbol,String}(Symbol("value")=>"String", Symbol("localizedValue")=>"String")
Base.propertynames(::Type{ UsageName }) = collect(keys(_property_map_UsageName))
Swagger.property_type(::Type{ UsageName }, name::Symbol) = Union{Nothing,eval(Meta.parse(_property_types_UsageName[name]))}
Swagger.field_name(::Type{ UsageName }, property_name::Symbol) =  _property_map_UsageName[property_name]

function check_required(o::UsageName)
    true
end

function validate_property(::Type{ UsageName }, name::Symbol, val)
end
